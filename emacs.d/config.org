* Basic window and font settings

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Fantasque Sans Mono-12"))
  (set-face-attribute 'default t :font "Fantasque Sans Mono-12")
  ;(set-face-attribute 'default t :font "Fantasque Sans Mono-12")
  (set-face-attribute 'default nil :height 120)
  ;(set-face-attribute 'default nil :height 140)
  ; (set-face-attribute 'default nil :height 150)
  ;(set-face-attribute 'default nil :height 170)
  ;(set-face-attribute 'default nil :height 180)

  ; TODO - use display-graphic-p instead of window-system
  (when window-system (scroll-bar-mode 0))
  (when window-system (menu-bar-mode 1))
  (when tool-bar-mode (tool-bar-mode 0))
  (when (not (window-system)) (menu-bar-mode 0))


  ;; TODO - check what this actually does. how does it change the original apropos search?
  ;(setq apropos-do-all t)

  ; TODO: install or use from git?
  ; (add-to-list 'load-path "~/.emacs.d/use-package")

  ;; Simple helper to interactively set font size
  (defun set-font-size (size) (set-face-attribute 'default nil :height size))

  ;; TODO: chci to?
  ;; Compatibility package
  ; (require 'cl)
#+END_SRC

* Terminal

#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/usr/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

* Org bullets

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

* IDO

When do we want to use ido-enable-flex-matching?
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (ido-mode 1)
  (ido-everywhere 1)

  (use-package ido-completing-read+
    :ensure t
    :init (ido-ubiquitous-mode 1))

  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))

  ; (use-package smex
  ;   :ensure t
  ;   :init (smex-initialize)
  ;   :bind ("M-x" . smex))

  (use-package amx
    :ensure t
    :init (amx-mode 1))

  ; switch buffers
  (global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+END_SRC

* Buffers
enable ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  ; Don't want this yet
  ; (setq ibuffer-expert t)
#+END_SRC

* avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC

* config reload

#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (global-set-key (kbd "C-c e") 'config-visit)

  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))

  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

* rainbow

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))
#+END_SRC

* magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("M-g" . magit-status))
#+END_SRC
