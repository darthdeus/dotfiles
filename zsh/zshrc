if [[ "$PROFILE_ZSH_STARTUP" == true ]]; then
  zmodload zsh/zprof
fi

export DOT_BASE_DIR="$HOME/.dotfiles"
export ZPLUG_HOME="$HOME/.dotfiles/third-party/zplug"

fpath=(~/.zsh/funcs "${fpath[@]}")

ZSH=$HOME/.zsh

# history config
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt HIST_IGNORE_SPACE

# disable the annoying beep
unsetopt beep

# emacs style keybindings
bindkey -e

source "$ZPLUG_HOME/init.zsh"

zplug "ytet5uy4/fzf-widgets"
zplug "changyuheng/fz", defer:1
zplug "rupa/z", use:z.sh


# Load all libs under
for config_file in "$ZSH"/lib/*.zsh; do
  source "$config_file"
done

# completion settings
# zstyle :compinstall filename '/Users/darth/.zshrc'
# TODO: create ~/.zfunc if not exists
fpath=(~/.zsh/completion "${fpath[@]}")

autoload -Uz compinit
compinit -C

# Autoreload all completion commands
# function au() {
#   unfunction -m '_*'
#   autoload -Uz compinit
#   compinit
# }

# TODO: do I still need this?
# zstyle ':completion:*:*:docker:*' option-stacking yes
# zstyle ':completion:*:*:docker-*:*' option-stacking yes

autoload -Uz select-word-style
select-word-style bash

# color theme
source "$ZSH"/themes/darth.zsh-theme

VIM_VERSION="nvim"

export EDITOR="$VIM_VERSION"
export VISUAL="$VIM_VERSION"

alias e="$VIM_VERSION"
alias vi="$VIM_VERSION"
alias vim="$VIM_VERSION"

export XDG_CONFIG_HOME="$HOME/.config"
export LC_ALL=en_US.UTF-8

autoload -Uz $(print ~/.dotfiles/zsh/funcs/*(:t))

autoload -U edit-command-line
zle -N edit-command-line
bindkey '\C-x\C-e' edit-command-line

LOCAL_PATHS="/usr/local/bin:/usr/local/sbin"

# CROSS_PATH="$HOME/opt/cross/bin"
# PERF_TOOLS_PATH="$HOME/.dotfiles/third-party/perf-tools/bin:$HOME/.dotfiles/third-party/FlameGraph"

export GOPATH="$HOME/projects/go"

PATH="$HOME/.dotfiles/bin:$HOME/projects/master-thesis-code/bin:$LOCAL_PATHS:$PATH"

# Base16 Shell
BASE16_SHELL="$HOME/.config/base16-shell/"
if [ -n "$PS1" ] && [ -s "$BASE16_SHELL/profile_helper.sh" ]; then
  eval "$("$BASE16_SHELL/profile_helper.sh")"
fi
# base16_default-dark

export FZF_DEFAULT_COMMAND='ag --hidden --ignore .git -l -g ""'
# export FZF_DEFAULT_COMMAND='
#   (git ls-tree -r --name-only HEAD ||
#    find . -path "*/\.*" -prune -o -type f -print -o -type l -print |
#       sed s/^..//) 2> /dev/null'

[ -f "$HOME/.fzf.zsh" ] && source "$HOME/.fzf.zsh"

[ -f "$HOME/.profile" ] && source "$HOME/.profile"

stty sane

export PROJECT_HOME="$HOME/projects"

# wmname LG3D

export CUDA_HOME="/usr/local/cuda"
export PATH="$CUDA_HOME/bin:$HOME/.local/bin:$PATH"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$CUDA_HOME/extras/CUPTI/lib64:$CUDA_HOME/lib64:/usr/local/lib"

[ -f ~/mrk-proxy/mrk-proxy ] && . ~/mrk-proxy/mrk-proxy
if [ "$(get-ssid)" = "Wireless1" ]; then
  mpo
fi

export PRIMER3HOME="$HOME/work/primer3-2.4.0/src"

export PYSPARK_PYTHON="python3"
export PYSPARK_DRIVER_PYTHON="python3"

# if [[ -n $VIRTUAL_ENV && -e "${VIRTUAL_ENV}/bin/activate"  ]]; then
#   source "${VIRTUAL_ENV}/bin/activate"
# fi

# [ -f ~/.venv/tf-gpu/bin/activate ] && source ~/.venv/tf-gpu/bin/activate


[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

function source-nix() {
  source ~/.nix-profile/etc/profile.d/nix.sh
}

function ranger-cd {
    tempfile="$(mktemp -t tmp.XXXXXX)"
    ranger --cmd='set show_hidden=true' --choosedir="$tempfile" "${@:-$(pwd)}"
    test -f "$tempfile" &&
    if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
        cd -- "$(cat "$tempfile")"
    fi
    rm -f -- "$tempfile"
}
alias racd="ranger-cd"
bindkey -s '^o' 'ranger-cd^m'

function recompdef() {
  local line

  unfunction   - $1 2> /dev/null
  autoload -Uz - $1 || return
  autoload +X  - $1 || return
  [[ -n $functions_source[$1] ]] &&
  line=${${(Af)"$( < $functions_source[$1] )"}[1]}

  [[ $line == '#autoload'* ]] && return 0
  [[ $line == '#compdef'*  ]] && argv+=( ${${(Az)line}[2,-1]} )

  compdef $@
}
export GPG_TTY="$(tty)"
export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
gpgconf --launch gpg-agent
# TODO: when exactly is this needed?
gpg-connect-agent updatestartuptty /bye

zplug load

if [[ "$PROFILE_ZSH_STARTUP" == true ]]; then
  zprof
fi
