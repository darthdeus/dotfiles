if [[ "$PROFILE_ZSH_STARTUP" == true ]]; then
  zmodload zsh/zprof
fi

if [[ `uname` == 'Linux' ]]; then
  export ZSH_OS=linux
elif [[ `uname` == 'Darwin' ]]; then
  export ZSH_OS=osx
fi

ZSH=$HOME/.zsh

# history config
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt HIST_IGNORE_SPACE

# disable the annoying beep
unsetopt beep

# emacs style keybindings
bindkey -e

# Load all libs under
for config_file in "$ZSH"/lib/*.zsh; do
  source "$config_file"
done

# completion settings
# zstyle :compinstall filename '/Users/darth/.zshrc'
# TODO: create ~/.zfunc if not exists
fpath=(~/.zsh/completion "${fpath[@]}")
autoload -Uz compinit
compinit

# TODO: do I still need this?
# zstyle ':completion:*:*:docker:*' option-stacking yes
# zstyle ':completion:*:*:docker-*:*' option-stacking yes

autoload -Uz select-word-style
select-word-style bash

# color theme
source "$ZSH"/themes/darth.zsh-theme

export EDITOR="vim"
export VISUAL="vim"

export XDG_CONFIG_HOME="$HOME/.config"
export LC_ALL=en_US.UTF-8

LOCAL_PATHS="/usr/local/bin:/usr/local/sbin"

# CROSS_PATH="$HOME/opt/cross/bin"
# PERF_TOOLS_PATH="$HOME/.dotfiles/third-party/perf-tools/bin:$HOME/.dotfiles/third-party/FlameGraph"

export GOPATH="$HOME/projects/go"

PATH="$HOME/.dotfiles/bin:$LOCAL_PATHS:$PATH"

# Base16 Shell
BASE16_SHELL="$HOME/.config/base16-shell/"
if [ -n "$PS1" ] && [ -s "$BASE16_SHELL/profile_helper.sh" ]; then
  eval "$("$BASE16_SHELL/profile_helper.sh")"
fi
base16_default-dark

export FZF_DEFAULT_COMMAND='ag --hidden --ignore .git -l -g ""'
# export FZF_DEFAULT_COMMAND='
#   (git ls-tree -r --name-only HEAD ||
#    find . -path "*/\.*" -prune -o -type f -print -o -type l -print |
#       sed s/^..//) 2> /dev/null'

[ -f "$HOME/.fzf.zsh" ] && source "$HOME/.fzf.zsh"

# TODO: figure out how to make fasd work with my current hotkeys
# eval "$(fasd --init auto)"

[ -f "$HOME/.profile" ] && source "$HOME/.profile"

stty sane

# TODO: fix the OS X gpg agent
# platform=`uname`
# if [[ "$platform" == "Darwin" ]]; then
#   if [ -f ~/.gnupg/.gpg-agent-info  ] && [ -n "$(pgrep gpg-agent)"  ]; then
#     source ~/.gnupg/.gpg-agent-info
#     export GPG_AGENT_INFO
#   else
#     eval $(gpg-agent --daemon --write-env-file ~/.gnupg/.gpg-agent-info)
#   fi
# fi

export PROJECT_HOME="$HOME/projects"

# wmname LG3D

export CUDA_HOME="/usr/local/cuda-10.0"
export PATH="$CUDA_HOME/bin:$PATH"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$CUDA_HOME/extras/CUPTI/lib64:$CUDA_HOME/lib64:/usr/local/lib"

[ -f ~/mrk-proxy/mrk-proxy ] && . ~/mrk-proxy/mrk-proxy
if [ "$(get-ssid)" = "Wireless1" ]; then
  mpo
fi

export PRIMER3HOME="$HOME/work/primer3-2.4.0/src"

export PYSPARK_PYTHON="python3"
export PYSPARK_DRIVER_PYTHON="python3"

# if [[ -n $VIRTUAL_ENV && -e "${VIRTUAL_ENV}/bin/activate"  ]]; then
#   source "${VIRTUAL_ENV}/bin/activate"
# fi

# [ -f ~/.venv/tf-gpu/bin/activate ] && source ~/.venv/tf-gpu/bin/activate


[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# export PYENV_ROOT="$HOME/.pyenv"
# export PATH="$PYENV_ROOT/bin:$PATH"
# if command -v pyenv 1>/dev/null 2>&1; then
#   eval "$(pyenv init -)"
# fi

function source-nix() {
  source ~/.nix-profile/etc/profile.d/nix.sh
}

function ranger-cd {
    tempfile="$(mktemp -t tmp.XXXXXX)"
    ranger --cmd='set show_hidden=true' --choosedir="$tempfile" "${@:-$(pwd)}"
    test -f "$tempfile" &&
    if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
        cd -- "$(cat "$tempfile")"
    fi
    rm -f -- "$tempfile"
}

bindkey -s '^o' 'ranger-cd^m'

if [[ "$PROFILE_ZSH_STARTUP" == true ]]; then
  zprof
fi
