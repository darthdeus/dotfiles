ZSH=$HOME/.zsh

# history config
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000

# disable the annoying beep
unsetopt beep

# emacs style keybindings
bindkey -e

# Load all libs under
for config_file ($ZSH/lib/*.zsh) source "$config_file"

# completion settings
# zstyle :compinstall filename '/Users/darth/.zshrc'
autoload -Uz compinit
compinit

autoload -Uz select-word-style
select-word-style bash

# color theme
source $ZSH/themes/darth.zsh-theme

export EDITOR="vim"

export XDG_CONFIG_HOME="$HOME/.config"
export LC_ALL=en_US.UTF-8

PATH="/usr/local/texlive/2016/bin/x86_64-darwin/:$PATH"
PYTHON_PATH="$HOME/.miniconda/bin" # ":$HOME/.local/bin"
RUBY_PATH="$HOME/.gem/ruby/2.4.0/bin:$HOME/.rbenv/bin"
DEPOT_PATH="$HOME/projects/depot_tools:"
CABAL_PATH="$HOME/.cabal/bin"
CROSS_PATH="$HOME/opt/cross/bin"
# TODO: unify this
NODE_PATH="$HOME/.node_modules/bin"
PERF_TOOLS_PATH="$HOME/.dotfiles/perf-tools/bin:$HOME/.dotfiles/FlameGraph"

PATH="$PERF_TOOLS_PATH:$HOME/neovim/bin:$NODE_PATH:$HOME/.dotfiles/bin:$PYTHON_PATH:$RUBY_PATH:$CABAL_PATH:$CROSS_PATH:$HOME/bin:/usr/local/bin:/usr/local/sbin:$PATH"

if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"

if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

# Base16 Shell
BASE16_SHELL=$HOME/.config/base16-shell/
[ -n "$PS1" ] && [ -s $BASE16_SHELL/profile_helper.sh ] && eval "$($BASE16_SHELL/profile_helper.sh)"

base16_default-dark

export GOPATH="$HOME/projects/go"
export PATH="$PATH:$GOPATH/bin"
export RUST_SRC_PATH="$HOME/projects/rust/src"

export FZF_DEFAULT_COMMAND='ag -g ""'
# export FZF_DEFAULT_COMMAND='
#   (git ls-tree -r --name-only HEAD ||
#    find . -path "*/\.*" -prune -o -type f -print -o -type l -print |
#       sed s/^..//) 2> /dev/null'

# [[ -f $HOME/.dircolors ]] && eval $(dircolors $HOME/.dircolors)

export EAGER_LOADING=true

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# TODO: figure out how to make fasd work with my current hotkeys
# eval "$(fasd --init auto)"

[ -f "$HOME/.profile" ] && source "$HOME/.profile"

stty sane

platform=`uname`

# TODO: fix the OS X gpg agent
# if [[ "$platform" == "Darwin" ]]; then
#   if [ -f ~/.gnupg/.gpg-agent-info  ] && [ -n "$(pgrep gpg-agent)"  ]; then
#     source ~/.gnupg/.gpg-agent-info
#     export GPG_AGENT_INFO
#   else
#     eval $(gpg-agent --daemon --write-env-file ~/.gnupg/.gpg-agent-info)
#   fi
# fi

export PROJECT_HOME="$HOME/projects"
# source virtualenvwrapper.sh

# wmname LG3D
# export PYTHONPATH="$HOME/.miniconda/lib/python3.6/site-packages:$PYTHONPATH"

export CUDA_HOME="/usr/local/cuda"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$CUDA_HOME/extras/CUPTI/lib64:$CUDA_HOME/lib64:/usr/local/lib"
