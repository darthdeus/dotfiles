# vim: set ft=zsh
if [[ "$PROFILE_ZSH_STARTUP" == true ]]; then
  zmodload zsh/zprof
fi

export DOT_BASE_DIR="$HOME/.dotfiles"
ZSH="$DOT_BASE_DIR/zsh"

# export ZPLUG_HOME="$HOME/.dotfiles/third-party/zplug"
# source "$ZPLUG_HOME/init.zsh"

source "$DOT_BASE_DIR/third-party/antidote/antidote.zsh"
antidote load "$ZSH/plugins.txt"

fpath=("$ZSH/funcs" "${fpath[@]}")

export PATH="$HOME/.bun/bin:$HOME/.npm/bin:/opt/homebrew/opt/openjdk/bin:$PATH:$HOME/.local/bin"
export PATH="$PATH:/opt/cuda/bin"

export LD_LIBRARY_PATH="/opt/cuda/lib64:$LD_LIBRARY_PATH"

HISTSIZE=10000
SAVEHIST=10000

HISTFILE="$HOME/.zsh_history"
mkdir -p "$(dirname "$HISTFILE")"

bindkey '^ ' autosuggest-accept
unsetopt beep
bindkey -e

autoload -Uz select-word-style
select-word-style bash

source "$ZSH/prompt.zsh"

autoload -U edit-command-line
zle -N edit-command-line
bindkey '\C-x\C-e' edit-command-line

export FZF_DEFAULT_COMMAND='fd --type f --strip-cwd-prefix --hidden --follow --exclude .git --ignore-file .ignore'

if [ -z "$VIM_VERSION" ]; then
  VIM_VERSION="nvim"
fi

export EDITOR="$VIM_VERSION"
export VISUAL="$VIM_VERSION"

alias vim="$VIM_VERSION"
alias vi="vim"

stty sane

# Load all libs under
for config_file in "$ZSH"/lib/*.zsh; do
  source "$config_file"
done

# completion settings
fpath=("$ZSH/completion" "${fpath[@]}")

autoload -Uz compinit
compinit -C

# zplug "zsh-users/zsh-autosuggestions"

# color theme
source "$ZSH/prompt.zsh"

# if [ -f /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
#   source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
# fi
#
# if [ -f /usr/share/doc/git-extras/git-extras-completion.zsh ]; then
#   source /usr/share/doc/git-extras/git-extras-completion.zsh
# fi
#
# if [ -f /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
#   source /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh
# fi

export XDG_CONFIG_HOME="$HOME/.config"
export LC_ALL=en_US.UTF-8

autoload -Uz $(print ~/.dotfiles/zsh/funcs/*(:t))

LOCAL_PATHS="/usr/local/bin:/usr/local/sbin"

export PATH="$HOME/.todo/bin:$HOME/.emacs.d/bin:$HOME/.dotfiles/bin:$LOCAL_PATHS:$PATH"

# Base16 Shell
# BASE16_SHELL="$HOME/.config/base16-shell/"
# if [ -n "$PS1" ] && [ -s "$BASE16_SHELL/profile_helper.sh" ]; then
#   eval "$("$BASE16_SHELL/profile_helper.sh")"
# fi
# base16_default-dark

if [ ! -S ~/.ssh/ssh_auth_sock ]; then
  eval `ssh-agent`
  ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
fi

export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock
ssh-add -l > /dev/null || ssh-add

export PATH="./node_modules/.bin:$HOME/.cargo/bin:$PATH:$HOME/projects/jai/bin"

# if type rustc &>/dev/null; then
#   export RUST_SRC_PATH=$(rustc --print sysroot)/lib/rustlib/src/rust/library/
# fi

export QT_STYLE_OVERRIDE=adwaita-dark
export LOCALE_ARCHIVE=/usr/lib/locale/locale-archive
export CARGO_NET_GIT_FETCH_WITH_CLI=true

if [[ `uname` == "Darwin" ]]; then
  export TERM=xterm-256color

  [ -f /opt/homebrew/bin/brew ] && eval "$(/opt/homebrew/bin/brew shellenv)"

  export LLVM_SYS_160_PREFIX=$HOME/builds/llvm/prefix_release/

  export HOMEBREW_NO_AUTO_UPDATE=1
  export HOMEBREW_NO_INSTALL_CLEANUP=1

  export PATH="/opt/homebrew/opt/grep/libexec/gnubin:$PATH"
  export LIBRARY_PATH="/opt/homebrew/lib:$LIBRARY_PATH"

  export C_INCLUDE_PATH="/opt/homebrew/include:$C_INCLUDE_PATH"
  export CFLAGS=$(pkg-config --cflags protobuf)

  export PATH="/opt/homebrew/opt/openjdk/bin:/opt/homebrew/Cellar/icu4c/73.2/bin/:$PATH"
  export CPPFLAGS="-I/opt/homebrew/opt/openjdk/include"

  export PKG_CONFIG_PATH="/opt/homebrew/Cellar/icu4c/73.2/lib/pkgconfig"

  # This is somehow necessary for Xcode to work since it uses a different libclang
  export LIBCLANG_PATH=/Library/Developer/CommandLineTools/usr/lib/libclang.dylib
else
  # export LLVM_SYS_150_PREFIX=$HOME/gen/llvm-bin-release-15.0.7
  export LLVM_SYS_160_PREFIX=$HOME/builds/llvm/prefix_release/
  export LLVM_SYS_160_DEBUG_PREFIX=$HOME/gen/llvm-bin-16.0.6
  export LLVM_SYS_160_RELEASE_PREFIX=$HOME/gen/llvm-release-bin-16.0.6
fi

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
[ -f ~/.local-aliases.zsh ] && source ~/.local-aliases.zsh
#
[ -f /usr/share/fzf/key-bindings.zsh ] && source /usr/share/fzf/key-bindings.zsh
[ -f /usr/share/fzf/completion.zsh ] && source /usr/share/fzf/completion.zsh
[ -f /usr/share/doc/git-extras/git-extras-completion.zsh ] && source /usr/share/doc/git-extras/git-extras-completion.zsh

[ -f /opt/asdf-vm/asdf.sh ] && source /opt/asdf-vm/asdf.sh

# eval "$(direnv hook zsh)"
export DIRENV_LOG_FORMAT=""

export TOPIARY_LANGUAGE_DIR="$HOME/projects/topiary/languages"

# export LD_LIBRARY_PATH="$(nix eval --raw 'nixpkgs#alsaLib.outPath')/lib:$LD_LIBRARY_PATH"
# export LD_LIBRARY_PATH="$(nix eval --raw 'nixpkgs#xorg.libX11.outPath')/lib:$LD_LIBRARY_PATH"
# export LD_LIBRARY_PATH="$(nix eval --raw 'nixpkgs#xorg.libXcursor.outPath')/lib:$LD_LIBRARY_PATH"
# export LD_LIBRARY_PATH="$(nix eval --raw 'nixpkgs#xorg.libXrandr.outPath')/lib:$LD_LIBRARY_PATH"
# export LD_LIBRARY_PATH="$(nix eval --raw 'nixpkgs#xorg.libXi.outPath')/lib:$LD_LIBRARY_PATH"
# export PKG_CONFIG_PATH="$(nix eval --raw 'nixpkgs#alsaLib.dev.outPath')/lib/pkgconfig"

if [ -e $HOME/.nix-profile/etc/profile.d/nix.sh ]; then
  source $HOME/.nix-profile/etc/profile.d/nix.sh
fi

if [ -e $HOME/.nix-profile/etc/profile.d/hm-session-vars.sh ]; then
  source $HOME/.nix-profile/etc/profile.d/hm-session-vars.sh
fi

export MONITOR_LEFT="DP-2"
export MONITOR_CENTER="DP-4"
export MONITOR_RIGHT="DP-0"

export npm_config_prefix="$HOME/.local"

export DOTNET_CLI_TELEMETRY_OPTOUT=1

if [[ "$PROFILE_ZSH_STARTUP" == true ]]; then
  zprof
fi
