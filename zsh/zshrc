if [[ "$PROFILE_ZSH_STARTUP" == true ]]; then
  zmodload zsh/zprof
fi

fpath=(~/.zsh/funcs "${fpath[@]}")

ZSH=$HOME/.zsh

# Load all libs under
for config_file in "$ZSH"/lib/*.zsh; do
  source "$config_file"
done

# completion settings
fpath=(~/.zsh/completion "${fpath[@]}")

autoload -Uz compinit
compinit -C

# color theme
source "$ZSH/prompt.zsh"

if [ -z "$VIM_VERSION" ]; then
  VIM_VERSION="nvim"
fi

export EDITOR="$VIM_VERSION"
export VISUAL="$VIM_VERSION"

alias vim="$VIM_VERSION"
alias vi="vim"

export XDG_CONFIG_HOME="$HOME/.config"
export LC_ALL=en_US.UTF-8

autoload -Uz $(print ~/.dotfiles/zsh/funcs/*(:t))

autoload -U edit-command-line
zle -N edit-command-line
bindkey '\C-x\C-e' edit-command-line

LOCAL_PATHS="/usr/local/bin:/usr/local/sbin"

PATH="$HOME/.dotfiles/bin:$LOCAL_PATHS:$PATH"

# Base16 Shell
BASE16_SHELL="$HOME/.config/base16-shell/"
if [ -n "$PS1" ] && [ -s "$BASE16_SHELL/profile_helper.sh" ]; then
  eval "$("$BASE16_SHELL/profile_helper.sh")"
fi
base16_default-dark

export FZF_DEFAULT_COMMAND='ag --hidden --ignore .git --ignore "*.png" --ignore "*.jpg" --ignore "*.mp3" --ignore "*.import" --ignore "*.wav" --ignore "*.ogg" --ignore "*.aseprite" --ignore "*.ttf" --ignore "*.gif" --ignore "*.TTF" --ignore "*.afdesign" --ignore steam --ignore "*.afphoto" --ignore "*.tres" -l -g ""'
# export FZF_DEFAULT_COMMAND='
#   (git ls-tree -r --name-only HEAD ||
#    find . -path "*/\.*" -prune -o -type f -print -o -type l -print |
#       sed s/^..//) 2> /dev/null'

[ -f "$HOME/.fzf.zsh" ] && source "$HOME/.fzf.zsh"
[ -f "$HOME/.profile" ] && source "$HOME/.profile"

stty sane

export PROJECT_HOME="$HOME/projects"

function source-nix() {
  source ~/.nix-profile/etc/profile.d/nix.sh
}

function ranger-cd {
    tempfile="$(mktemp -t tmp.XXXXXX)"
    ranger --cmd='set show_hidden=true' --choosedir="$tempfile" "${@:-$(pwd)}"
    test -f "$tempfile" &&
    if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
        cd -- "$(cat "$tempfile")"
    fi
    rm -f -- "$tempfile"
}
alias racd="ranger-cd"
bindkey -s '^o' 'ranger-cd^m'

function recompdef() {
  local line

  unfunction   - $1 2> /dev/null
  autoload -Uz - $1 || return
  autoload +X  - $1 || return
  [[ -n $functions_source[$1] ]] &&
  line=${${(Af)"$( < $functions_source[$1] )"}[1]}

  [[ $line == '#autoload'* ]] && return 0
  [[ $line == '#compdef'*  ]] && argv+=( ${${(Az)line}[2,-1]} )

  compdef $@
}

if [ ! -S ~/.ssh/ssh_auth_sock ]; then
  eval `ssh-agent`
  ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
fi

export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock
ssh-add -l > /dev/null || ssh-add

# TODO: store these in a subdir per host
# if [[ "$HOST" == "pipik" ]]; then
#   export QT_SCALE_FACTOR=2
#   export GDK_SCALE=2
# fi

if [[ "$PROFILE_ZSH_STARTUP" == true ]]; then
  zprof
fi

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export PATH="$HOME/.todo/bin:$PATH"

[ -f /opt/homebrew/bin/brew ] && eval "$(/opt/homebrew/bin/brew shellenv)"

# export PATH="$HOME/.cargo/bin:$HOME/projects/homebrew/bin:$HOME/projects/homebrew/sbin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"
if type rustc &>/dev/null; then
  export RUST_SRC_PATH=$(rustc --print sysroot)/lib/rustlib/src/rust/library/
fi

export QT_STYLE_OVERRIDE=adwaita-dark

export LOCALE_ARCHIVE=/usr/lib/locale/locale-archive
