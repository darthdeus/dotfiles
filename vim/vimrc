lua require('plugins')
lua require('config')


" Set updatetime for CursorHold
" 300ms of no cursor movement to trigger CursorHold
" set updatetime=300
" Show diagnostic popup on cursor hold
" autocmd CursorHold * lua vim.lsp.diagnostic.show_line_diagnostics()

" let g:completion_chain_complete_list = [
"     \{'complete_items': ['lsp', 'snippet', 'buffers']},
"     \{'mode': '<c-p>'},
"     \{'mode': '<c-n>'}
" \]

" let g:completion_enable_auto_popup = 0
" Use <Tab> and <S-Tab> to navigate through popup menu
" inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Set completeopt to have a better completion experience
" set completeopt=menuone,noinsert,noselect


" Avoid showing message extra message when using completion
" set shortmess+=c

set completeopt=menuone,noselect


inoremap <silent><expr> <C-Space> compe#complete()
" inoremap <silent><expr> <CR>      compe#confirm('<CR>')
inoremap <silent><expr> <C-e>     compe#close('<C-e>')
inoremap <silent><expr> <C-f>     compe#scroll({ 'delta': +4 })
inoremap <silent><expr> <C-d>     compe#scroll({ 'delta': -4 })

" Expand
imap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
smap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'

" Expand or jump
imap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
smap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'


" Enable type inlay hints
" autocmd CursorMoved,InsertLeave,BufEnter,BufWinEnter,TabEnter,BufWritePost *
" \ lua require'lsp_extensions'.inlay_hints{ prefix = '', highlight = "Comment", enabled = {"TypeHint", "ChainingHint", "ParameterHint"} }

set synmaxcol=7000

" TODO: add back yapf when https://github.com/sbdchd/neoformat/issues/126 is fixed
let g:neoformat_enabled_python = ['autopep8', 'docformatter', 'black']
" let g:neoformat_enabled_python = ['autopep8', 'docformatter']
let g:neoformat_run_all_formatters = 1

let mapleader=','
let maplocalleader=','

let g:VimuxOrientation = 'h'

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden
set scrolloff=9

set nonumber
set norelativenumber
set noshowmode

" Set encoding
set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8
set fileencodings=ucs-bom,utf8,latin2 " ,latin1,default

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" TODO - does this help things?
" set smartindent

set list listchars=tab:--,trail:.

set backupcopy=yes

set hlsearch
set incsearch

" Make searches case-sensitive only if they contain upper-case characters
set ignorecase
set smartcase
nnoremap <CR> :nohlsearch<CR>/<BS>

" TODO - how does this differ from "longest,list" only?
" Tab completion
set wildmode=list:longest,list:full
set wildignore+=obj,*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*,node_modules,tmp,project/target,target,tags,CMakeFiles,bower_components,dist,_darcs,vcr,app/assets/images,*.dSYM,*.pyc,_build,rel,*.a,priv/static,*.aux,*.dvi,*.xmpi,*.out,*.lot,*.lof,*.blg,*.bbl,*.toc,__pycache__,build,logs,tags
let NERDTreeRespectWildIgnore=1

" TODO - what is the default behavior?
" Remap the tab key to do autocompletion or indentation depending on the
" context (from http://www.vim.org/tips/tip.php?tip_id=102)
" function! InsertTabWrapper()
"     let col = col('.') - 1
"     if !col || getline('.')[col - 1] !~ '\k'
"         return "\<tab>"
"     else
"         return "\<c-p>"
"     endif
" endfunction
"
" inoremap <tab> <c-r>=InsertTabWrapper()<cr>
" inoremap <s-tab> <c-n>

command! W :w

cmap w!! w !sudo tee > /dev/null %

" Status bar
set winwidth=75

" Use modeline overrides
set modeline
set modelines=10

set t_Co=256
set background=dark
" set termguicolors

let base16colorspace=256  " Access colors present in 256 colorspace
" color base16-material-palenight
color base16-default
" color Tomorrow-Night-Eighties

" Directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

" Remember last location in file
aug last_location
  au!
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
aug END

" Save undo history
if has('persistent_undo')
  set undofile
  if !isdirectory($HOME . '/.vimundo')
    silent !mkdir ~/.vimundo > /dev/null 2>&1
  endif
  set undodir=~/.vimundo
endif

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Show (partial) command in the status line
set showcmd

set cursorline
set nocursorcolumn

if has('gui_running')
  " Automatically resize splits when resizing MacVim window
  aug vim_gui_resized
    autocmd!
    autocmd VimResized * wincmd =
  aug END

  set visualbell
  set lines=40
  set columns=120

  " Remove scrollbars
  set guioptions-=L
  set guioptions-=r
  set guioptions-=T
endif


" Buffer resizing with arrow keys
nnoremap <Up> <C-w>5-
nnoremap <Down> <C-w>5+
nnoremap <Left> <C-w>5<
nnoremap <Right> <C-w>5>

" nnoremap - :Switch<cr>
nnoremap - :Neoformat<cr>
" nnoremap - :RustFmt<cr>

nnoremap ; :
" nnoremap : ;

nnoremap <leader>ge :e ~/.vimrc<CR>


" Expand %% to directory path of current buffer
cnoremap %% <C-R>=expand('%:h').'/'<CR>
nnoremap <Leader>e :call VimuxRunCommand("make")<cr>
nnoremap <F5> :call VimuxRunCommand("make")<cr>
nnoremap <F4> :call VimuxRunCommand("make")<cr>
" nnoremap <leader>r :call VimuxRunCommand("make ". expand("%h"))<cr>
nnoremap <leader>r :call VimuxRunCommand("make test")<cr>
nnoremap <leader>c :call VimuxRunCommand("make clean")<cr>

" Inserts the path of the currently edited file in command mode
cnoremap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Open files with <leader>f
noremap <leader>f  :Files ./<CR>
" Open files, limited to the directory of the current files, with <leader>gf
noremap <leader>F  :FZF %%<CR>

nnoremap <leader>gt :Tags<cr>
nnoremap <leader>ga :Rg<cr>
nnoremap <leader>gd :Rg <C-r><C-w><cr>

nnoremap <leader>b :Buffers<cr>
nnoremap <leader>B :BTags<cr>

nnoremap <C-a> ^
nnoremap <C-e> $

" TODO: figure out how to remap these?
" nunmap ]f
" nunmap [f

inoremap <C-a> <Home>
inoremap <C-e> <End>

" For easier navigation between windows
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-h> <C-w><C-h>
nnoremap <C-l> <C-w><C-l>

vnoremap - :Neoformat<cr>

" Bubble multiple lines
vnoremap <C-Up> <C-w><C-k>
vnoremap <C-Down> <C-w><C-j>
vnoremap <C-Left> <C-w><C-h>
vnoremap <C-Right> <C-w><C-l>

" fat fingers
noremap <F1> <Esc>

inoremap <C-X><C-@> <C-A>

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
" imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
" imap <c-x><c-l> <plug>(fzf-complete-line)

xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" Disable accidental ex mode
nmap Q <NOP>

" Switching between active files in a buffer.
nnoremap <leader><leader> <c-^>

" CTags - TODO - find a good hotkey for this
" # TODO: ignore from a file?
noremap <leader>lt :!ctags --extras=+f --exclude=build --exclude=public --exclude=target --exclude=node_modules --exclude=.git -R *<CR>
noremap <C-\> :tnext<CR>

noremap <silent> <leader>y :<C-u>silent '<,'>w !pbcopy<CR>

" https://github.com/junegunn/fzf.vim/issues/544
" if has('nvim')
"   au TermOpen * tnoremap <Esc> <c-\><c-n>
"   au TermOpen * tnoremap <C-c> <c-\><c-n>
"   au TermOpen * tnoremap <C-g> <c-\><c-n>
"   au FileType fzf tunmap <Esc>
" endif

if has("nvim")
  au TermOpen * tnoremap <buffer> <Esc> <c-\><c-n>
  au FileType fzf tunmap <buffer> <Esc>
endif

" TODO m1 ... bug? disabled for now
" au FileType fzf tunmap <Esc>
" au FileType fzf tunmap <C-c>
" au FileType fzf tunmap <C-g>
" TODO m1 ... bug?


" augroup fmt
"   autocmd!
"   autocmd BufWritePre *.go undojoin | Neoformat
" augroup END

let g:jedi#smart_auto_mappings = 0

aug various_file_types
  autocmd!
  " Rakefile, Vagrantfile and Gemfile are Ruby
  autocmd BufRead,BufNewFile {Capfile,Gemfile,Rakefile,Vagrantfile,config.ru} set ft=ruby
  autocmd BufRead,BufNewFile *.asm set ft=nasm

  " add json syntax highlighting
  " autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescript.tsx

  autocmd BufNewFile,BufRead *.slime set filetype=slim

  autocmd BufNewFile,BufRead *.conf set filetype=conf
  autocmd BufNewFile,BufRead *vimrc set filetype=vim

  autocmd BufNewFile,BufRead *.md set wrap
  autocmd BufNewFile,BufRead *.markdown inoremap <buffer>_ \_
  autocmd BufNewFile,BufRead *.markdown inoremap <buffer>\\ \\\\\\\\
  autocmd BufNewFile,BufRead *.markdown inoremap <buffer><C-b> \boldsymbol
  " autocmd BufNewFile,BufRead *.markdown inoremap <buffer><C-m> \mathcal

  autocmd BufWritePost .Xresources,Xresources silent execute '!xrdb ~/.Xresources' | redraw | echom 'Xresources reloaded'
aug END

" remove unnecessary whitespaces
noremap <leader>ws :%s/ *$//g<cr><c-o><cr>

set pastetoggle=<F3>
set mouse-=a

nnoremap <F9> :Neogit<CR>

" nnoremap <F7> :set keymap=czech-qwerty<CR>
" nnoremap <F8> :set keymap=<CR>
" inoremap <F7> <C-o>:set keymap=czech-qwerty<CR>
" inoremap <F8> <C-o>:set keymap=<CR>

nnoremap <F12> :e ++enc=iso-8859-2<CR>

au BufRead,BufNewFile */funcs/* setfiletype zsh

autocmd BufNewFile,BufRead * :normal zz

let g:limelight_paragraph_span = 2
" autocmd BufRead,BufNewFile * Limelight 0.5

" Include user's local vim config
if filereadable(expand('~/.vimrc.local'))
  source ~/.vimrc.local
endif

if has('user_commands')
  command! -bang -nargs=? -complete=file E e<bang> <args>
  command! -bang -nargs=? -complete=file W w<bang> <args>
  command! -bang -nargs=? -complete=file Wq wq<bang> <args>
  command! -bang -nargs=? -complete=file WQ wq<bang> <args>
  command! -bang Wa wa<bang>
  command! -bang WA wa<bang>
  command! -bang Q q<bang>
  command! -bang QA qa<bang>
  command! -bang Qa qa<bang>
endif

"alphsubs ---------------------- {{{
        execute "digraphs ks " . 0x2096
        execute "digraphs as " . 0x2090
        execute "digraphs es " . 0x2091
        execute "digraphs hs " . 0x2095
        execute "digraphs is " . 0x1D62
        execute "digraphs ks " . 0x2096
        execute "digraphs ls " . 0x2097
        execute "digraphs ms " . 0x2098
        execute "digraphs ns " . 0x2099
        execute "digraphs os " . 0x2092
        execute "digraphs ps " . 0x209A
        execute "digraphs rs " . 0x1D63
        execute "digraphs ss " . 0x209B
        execute "digraphs ts " . 0x209C
        execute "digraphs us " . 0x1D64
        execute "digraphs vs " . 0x1D65
        execute "digraphs xs " . 0x2093
"}}


function! s:profilestop()
  profdel func *
  profdel file *
  " qa!
endfunction

function! s:profilestart()
  profile start vim.profile
  profile func *
  profile file *
endfunction


func! GodotSettings() abort
    setlocal foldmethod=expr
    setlocal tabstop=4 noexpandtab autoindent shiftwidth=4
endfunc
augroup godot | au!
    au FileType gdscript call GodotSettings()
augroup end


" set foldmethod=expr
" set foldexpr=nvim_treesitter#foldexpr()


command! -nargs=0 StartProfiling call s:profilestart()
command! -nargs=0 StopProfiling call s:profilestop()

set exrc
set secure
