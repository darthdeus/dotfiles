" This must be first, because it changes other options as a side effect.
set nocompatible

" set shell=/bin/sh

if has('python3')
  silent! python3 1
endif

call plug#begin('~/.vim/bundle')

Plug 'tpope/vim-sensible'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-scriptease'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-rsi'
" Plug 'tpope/vim-rails'
" Plug 'tpope/vim-rake'
" Plug 'slim-template/vim-slim', { 'for': 'slim' }
" Plug 'skwp/vim-rspec'

Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'

Plug 'vim-scripts/a.vim'
Plug 'benmills/vimux'
Plug 'drmikehenry/vim-headerguard'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-lua-ftplugin'

Plug 'chrisbra/vim-zsh'
" Plug 'ludovicchabant/vim-gutentags'

" Plug 'rking/ag.vim'
Plug 'octol/vim-cpp-enhanced-highlight'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'junegunn/vim-easy-align'

Plug 'tomtom/tcomment_vim'
Plug 'tomtom/tlib_vim'
Plug 'godlygeek/tabular'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'leafgarland/typescript-vim'
Plug 'Quramy/tsuquyomi'

Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'

Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTree' }

" Plug 'krisajenkins/vim-projectlocal'
Plug 'AndrewRadev/switch.vim'
Plug 'eshock/vim-matchit'
Plug 'mattn/gist-vim'
Plug 'mattn/webapi-vim'


Plug 'sjl/gundo.vim'
Plug 'othree/html5.vim'

Plug 'rhysd/vim-clang-format'
Plug 'kana/vim-operator-user'

Plug 'mattn/emmet-vim'

Plug 'jiangmiao/auto-pairs'

" Plug 'ajh17/VimCompletesMe'
" Plug 'Shougo/neocomplete.vim'
" Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }
Plug 'tell-k/vim-autopep8'

Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
" Plug 'Shougo/neosnippet.vim'
" Plug 'Shougo/neosnippet-snippets'
" Plug 'honza/vim-snippets'

Plug 'jaxbot/semantic-highlight.vim'
let g:semanticTermColors = [28,1,2,3,4,5,6,7,25,9,10,34,12,13,14,15,16,125,124,19]

Plug 'w0rp/ale'
" Plug 'python-mode/python-mode'
Plug 'davidhalter/jedi-vim'

Plug 'autozimu/LanguageClient-neovim', { 'branch': 'next', 'do': './install.sh' }

" Plug 'Valloric/YouCompleteMe'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'Shougo/neco-vim'

Plug 'zchee/deoplete-jedi'

if has('nvim')
  Plug 'sbdchd/neoformat'

  Plug 'numirias/semshi', {'do': ':UpdateRemotePlugins'}
else
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

Plug 'cespare/vim-toml'

" Plug 'sebastianmarkow/deoplete-rust'
" TODO - re-enable this
" Plug 'janko-m/vim-test'
" Plug 'rust-lang/rust.vim'
" Plug 'racer-rust/vim-racer'

call plug#end()

set smartindent

let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_extra_conf_globlist = ['*']
let g:ycm_show_diagnostics_ui = 1

nnoremap <leader>jd :YcmCompleter GoTo<CR>
nnoremap <leader>jf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>je :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gt :YcmCompleter GetType<CR>
nnoremap <leader>gq :YcmCompleter GetDoc<CR>

let g:deoplete#enable_at_startup = 1
let g:jedi#completions_enabled = 0

let g:ale_rust_rls_toolchain = 'stable'

" let g:ale_completion_enabled = 1
let g:ale_fixers = {
      \ 'python': [
      \ 'trim_whitespace',
      \ 'add_blank_lines_for_python_control_statements',
      \ 'isort',
      \ ]
      \ }

let g:ale_python_mypy_options = '--ignore-missing-imports'
" TODO: add pylint when 2.1 is released, check https://pypi.org/project/pylint/
let g:ale_linters = {
      \ 'python': [ 'flake8', 'mypy' ],
      \ 'sh': ['shell', 'shellcheck'],
      \ 'zsh': ['shell'],
      \ 'rust': [ 'cargo' ],
      \ }
" \ 'autopep8'

" TODO: nightly instead?
let g:LanguageClient_serverCommands = {
      \ 'rust': ['rustup', 'run', 'stable', 'rls'],
      \ }
      " \ 'python': ['pyls'],
      " \ 'sh': ['bash-language-server', 'start'],
      " \ 'typescript': ['tsserver']
      " \ 'javascript': ['javascript-typescript-stdio'],
" TODO: try pyls properly?

nnoremap <C-space> :call LanguageClient_contextMenu()<CR>
nnoremap _ :call LanguageClient#textDocument_hover()<CR>
nnoremap gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <F2> :call LanguageClient#textDocument_rename()<CR>

set synmaxcol=7000

" TODO - TComment to use // C++ style comments in C files

let g:airline_powerline_fonts = 1
let g:airline_theme='base16_default'

" TODO: add back yapf when https://github.com/sbdchd/neoformat/issues/126 is fixed
" let g:neoformat_enabled_python = ['autopep8', 'docformatter', 'black']
let g:neoformat_enabled_python = ['autopep8', 'docformatter']
let g:neoformat_run_all_formatters = 1

" TODO: relative path to home?
let g:ycm_rust_src_path = $HOME . '/projects/rust/src'
let g:deoplete#sources#rust#rust_source_path = $HOME . '/projects/rust/src'
let g:deoplete#sources#rust#racer_binary = $HOME . '/.cargo/bin/racer'

let g:lua_check_syntax = 0
let g:lua_complete_omni = 1
let g:lua_complete_dynamic = 0
let g:lua_define_completion_mappings = 0

let g:python_host_prog = $HOME . '/.pyenv/versions/neovim2/bin/python'
let g:python3_host_prog = $HOME . '/.pyenv/versions/neovim3/bin/python'

" Go config
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_command = 'goimports'

let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
" let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go']  }
let g:go_list_type = 'quickfix'

" Change the leader to ','
let mapleader=','

let g:VimuxOrientation = 'h'
let g:airline_powerline_fonts = 1

" Deoplete tab behavior
" imap <C-k>     <Plug>(neosnippet_expand_or_jump)
" smap <C-k>     <Plug>(neosnippet_expand_or_jump)
" xmap <C-k>     <Plug>(neosnippet_expand_target)
"
" " SuperTab like snippets behavior.
" " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
" "imap <expr><TAB>
" " \ pumvisible() ? "\<C-n>" :
" " \ neosnippet#expandable_or_jumpable() ?
" " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
" smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
"
" " For conceal markers.
" if has('conceal')
"   set conceallevel=2 concealcursor=niv
" endif

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger='<c-j>'
let g:UltiSnipsJumpForwardTrigger='<c-j>'
let g:UltiSnipsJumpBackwardTrigger='<c-k>'

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit='vertical'

let g:UltiSnipsExpandTrigger       = '<tab>'
let g:UltiSnipsJumpForwardTrigger  = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
let g:UltiSnipsSnippetDirectories  = ['snips']

function! g:UltiSnips_Complete()
  call UltiSnips#ExpandSnippet()
  if g:ulti_expand_res == 0
    if pumvisible()
      return "\<C-n>"
    else
      call UltiSnips#JumpForwards()
      if g:ulti_jump_forwards_res == 0
        return "\<TAB>"
      endif
    endif
  endif
  return ''
endfunction

aug ultisnips_insert_enter_expand
  autocmd!
  autocmd InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
aug END

set foldlevelstart=200
let g:haskell_conceal       = 0
let g:haskell_quasi         = 1
let g:haskell_interpolation = 0
let g:haskell_regex         = 0
let g:haskell_jmacro        = 0
let g:haskell_shqq          = 0
let g:haskell_sql           = 0
let g:haskell_json          = 0
let g:haskell_xml           = 0

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
" imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
" imap <c-x><c-l> <plug>(fzf-complete-line)

xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" gist-vim defaults
if has('mac')
  let g:gist_clip_command = 'pbcopy'
elseif has('unix')
  let g:gist_clip_command = 'xclip -selection clipboard'
endif
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1
let g:gist_post_private = 1

" Turn off jslint errors by default
let g:JSLintHighlightErrorLine = 0

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden

set number

" TODO - check if this is still necessary in vim
" Set encoding
set encoding=utf-8

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

set list listchars=tab:\ \ ,trail:.

set backupcopy=yes

set hlsearch
set incsearch

" Make searches case-sensitive only if they contain upper-case characters
set ignorecase
set smartcase
nnoremap <CR> :nohlsearch<CR>/<BS>

" TODO - how does this differ from "longest,list" only?
" Tab completion
set wildmode=list:longest,list:full
set wildignore+=obj,*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*,node_modules,tmp,project/target,target,tags,CMakeFiles,bower_components,dist,_darcs,vcr,app/assets/images,*.dSYM,*.pyc,_build,deps,rel,*.a,priv/static,*.aux,*.dvi,*.xmpi,*.out,*.lot,*.lof,*.blg,*.bbl,*.toc,__pycache__

" TODO - what is the default behavior?
" Remap the tab key to do autocompletion or indentation depending on the
" context (from http://www.vim.org/tips/tip.php?tip_id=102)
" function! InsertTabWrapper()
"     let col = col('.') - 1
"     if !col || getline('.')[col - 1] !~ '\k'
"         return "\<tab>"
"     else
"         return "\<c-p>"
"     endif
" endfunction
"
" inoremap <tab> <c-r>=InsertTabWrapper()<cr>
" inoremap <s-tab> <c-n>

command! W :w

" Status bar
set winwidth=75

" Use modeline overrides
set modeline
set modelines=10

set t_Co=256
set background=dark

let base16colorspace=256  " Access colors present in 256 colorspace
color base16-default

" Directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

" Remember last location in file
aug last_location
  au!
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
aug END

" Save undo history
if has('persistent_undo')
  set undofile
  if !isdirectory($HOME . '/.vimundo')
    silent !mkdir ~/.vimundo > /dev/null 2>&1
  endif
  set undodir=~/.vimundo
endif

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Show (partial) command in the status line
set showcmd

" Remove scrollbars
set guioptions-=L
set guioptions-=r
set guioptions-=T

if has('gui_running')
  " Automatically resize splits when resizing MacVim window
  aug vim_gui_resized
    autocmd!
    autocmd VimResized * wincmd =
  aug END

  set visualbell
  " color Tomorrow-Night
  set lines=40
  set columns=120
endif

" Highlight current line
set cursorline
" set cursorcolumn

" Buffer resizing with arrow keys
nnoremap <Up> <C-w>5-
nnoremap <Down> <C-w>5+
nnoremap <Left> <C-w>5<
nnoremap <Right> <C-w>5>

nnoremap - :Switch<cr>

" Expand %% to directory path of current buffer
cnoremap %% <C-R>=expand('%:h').'/'<CR>
" nnoremap <leader>e :call VimuxRunCommand("make")<cr>
nnoremap <leader>r :call VimuxRunCommand("make ". expand("%h"))<cr>
nnoremap <leader>c :call VimuxRunCommand("make clean")<cr>

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
" TODO - figure out more clever usage for this
cnoremap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Open files with <leader>f
noremap <leader>f  :Files ./<CR>
" Open files, limited to the directory of the current files, with <leader>gf
noremap <leader>F  :FZF %%<CR>
noremap <leader>gf :GFiles ./<CR>
" TODO: find a better hotkey
" noremap <leader>gd :GFiles?<cr>

" Rails specific keystrokes
" noremap <leader>gr :topleft :split config/routes.rb<CR>
" noremap <leader>gg :topleft 50 :split Gemfile<CR>
"
" noremap <leader>gv :FZF app/views<cr>
" noremap <leader>gc :FZF app/controllers<cr>
" noremap <leader>gm :FZF app/models<cr>
" noremap <leader>gs :FZF app/services<cr>
" noremap <leader>gh :FZF app/helpers<cr>
" noremap <leader>gl :FZF lib<cr>
" noremap <leader>gk :FZF app/assets/stylesheets<cr>
" noremap <leader>gj :FZF app/assets/javascripts<cr>

" nnoremap <leader>w :VimuxRunCommand("webpack")<cr>

nnoremap <leader>gt :Tags<cr>
nnoremap <leader>ga :Ag<cr>
nnoremap <leader>gd :Ag <C-r><C-w><cr>


noremap <leader>a :TestSuite<cr>
" Run this file
noremap <leader>t :TestFile<cr>
" Run only the example under the cursor
noremap <leader>T :TestNearest<cr>

nnoremap <leader>b :Buffers<cr>
nnoremap <leader>B :BTags<cr>

nnoremap <C-a> ^
nnoremap <C-e> $

" For easier navigation between windows
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-h> <C-w><C-h>
nnoremap <C-l> <C-w><C-l>

vnoremap - :Neoformat<cr>

" Bubble multiple lines
vnoremap <C-Up> <C-w><C-k>
vnoremap <C-Down> <C-w><C-j>
vnoremap <C-Left> <C-w><C-h>
vnoremap <C-Right> <C-w><C-l>

" fat fingers
noremap <F1> <Esc>

inoremap <C-X><C-@> <C-A>


" Disable accidental ex mode
nmap Q <NOP>

" Switching between active files in a buffer.
nnoremap <leader><leader> <c-^>

" CTags - TODO - find a good hotkey for this
noremap <leader>lt :!ctags --extra=+f --exclude=public --exclude=node_modules --exclude=.git -R *<CR>
noremap <C-\> :tnext<CR>

noremap <silent> <leader>y :<C-u>silent '<,'>w !pbcopy<CR>

aug various_file_types
  autocmd!
  " Rakefile, Vagrantfile and Gemfile are Ruby
  autocmd BufRead,BufNewFile {Capfile,Gemfile,Rakefile,Vagrantfile,config.ru} set ft=ruby
  autocmd BufRead,BufNewFile *.asm set ft=nasm

  " add json syntax highlighting
  autocmd BufNewFile,BufRead *.tsx set filetype=typescript

  autocmd BufNewFile,BufRead *.slime set filetype=slim

  autocmd BufNewFile,BufRead *.conf set filetype=conf
  autocmd BufNewFile,BufRead *vimrc set filetype=vim

  autocmd BufNewFile,BufRead *.md set wrap
aug END

" remove unnecessary whitespaces
noremap <leader>ws :%s/ *$//g<cr><c-o><cr>

set pastetoggle=<F5>
set mouse=a

let g:clang_format#code_style = 'google'

aug cpp_types
  autocmd!
  autocmd FileType h,cc,c,cpp nnoremap <buffer><C-e> :<C-u>ClangFormat<CR>
  autocmd FileType h,cc,c,cpp nnoremap <buffer><leader>ha :HeaderguardAdd<CR>
  autocmd FileType h,cc,c,cpp vnoremap <buffer><C-e> :ClangFormat<CR>
aug END

let g:limelight_paragraph_span = 2
" autocmd BufRead,BufNewFile * Limelight 0.5

" let &viewdir=expand("~/.vim/viewdir")
" if !isdirectory(expand(&viewdir))|call mkdir(expand(&viewdir), "p", 451)|endif
"
" " TODO: fix this
" augroup AutoSaveFolds
"   autocmd!
"   autocmd BufWinLeave * mkview
"   autocmd BufWinEnter * silent! loadview
" augroup END

nnoremap <Leader>e :call VimuxRunCommand("make")<cr>

" Include user's local vim config
if filereadable(expand('~/.vimrc.local'))
  source ~/.vimrc.local
endif

if has('user_commands')
  command! -bang -nargs=? -complete=file E e<bang> <args>
  command! -bang -nargs=? -complete=file W w<bang> <args>
  command! -bang -nargs=? -complete=file Wq wq<bang> <args>
  command! -bang -nargs=? -complete=file WQ wq<bang> <args>
  command! -bang Wa wa<bang>
  command! -bang WA wa<bang>
  command! -bang Q q<bang>
  command! -bang QA qa<bang>
  command! -bang Qa qa<bang>
endif

function! s:profilestop()
  profdel func *
  profdel file *
  qa!
endfunction

function! s:profilestart()
  profile start vim.profile
  profile func *
  profile file *
endfunction

command! -nargs=0 StopProfiling call s:profilestop()

" function MyCustomHighlights()
"     hi semshiGlobal      ctermfg=red guifg=#ff0000
" endfunction
" autocmd FileType python call MyCustomHighlights()
" autocmd ColorScheme * call MyCustomHighlights()

set exrc
set secure
