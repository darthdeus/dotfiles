" This must be first, because it changes other options as a side effect.
set nocompatible

set shell=/bin/sh

if has('python3')
  silent! python3 1
endif

" let g:python_host_prog = $HOME . '/.venvs/neovim2/bin/python'
" let g:python3_host_prog = $HOME . '/.venvs/neovim3/bin/python'

if has('macunix')
  let g:python3_host_prog = '/Users/darth/projects/homebrew/bin/python3'
else
  let g:python3_host_prog = '/usr/bin/python'
endif

call plug#begin('~/.vim/bundle')


" Plug 'jdonaldson/vaxe'
" Plug 'habamax/vim-godot'
" Plug 'tpope/vim-haml'
" Plug 'tpope/vim-rails'
" Plug 'tpope/vim-rake'
" Plug 'slim-template/vim-slim', { 'for': 'slim' }
" Plug 'thoughtbot/vim-rspec'
" " let g:rspec_command = "!bin/rspec {spec}"
" let g:rspec_command = ":call VimuxRunCommand('bin/rspec {spec}')"

Plug 'bounceme/dim-jump'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-scriptease'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-rsi'

Plug 'prettier/vim-prettier'
let g:prettier#autoformat_require_pragma = 0
let g:prettier#autoformat_config_present = 1
let g:prettier#autoformat_config_files = ['.prettierrc']
Plug 'jparise/vim-graphql'
Plug 'pangloss/vim-javascript'
let g:javascript_plugin_flow = 1
Plug 'maxmellon/vim-jsx-pretty'
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }

" Plug 'leafgarland/typescript-vim'
" Plug 'Quramy/tsuquyomi'
" Plug 'peitalin/vim-jsx-typescript'

Plug 'editorconfig/editorconfig-vim'

Plug 'mileszs/ack.vim'

Plug 'junegunn/gv.vim'
Plug 'mgedmin/python-imports.vim'

" Plug 'calviken/vim-gdscript3'
Plug 'habamax/vim-godot'

" Plug 'lervag/vimtex'
" let g:vimtex_view_method = 'zathura'
" let g:tex_flavor = 'latex'

Plug 'junegunn/goyo.vim'
" Plug 'junegunn/limelight.vim'

Plug 'darthdeus/a.vim'
Plug 'benmills/vimux'
Plug 'drmikehenry/vim-headerguard'

Plug 'chrisbra/vim-zsh'
" Plug 'ludovicchabant/vim-gutentags'

Plug 'LnL7/vim-nix'

" Plug 'rking/ag.vim'
Plug 'octol/vim-cpp-enhanced-highlight'

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'

Plug 'tomtom/tcomment_vim'
Plug 'tomtom/tlib_vim'

Plug 'godlygeek/tabular'

" Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
Plug 'itchyny/lightline.vim'

Plug 'Shougo/echodoc.vim'
let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'virtual'
" let g:echodoc#type = 'floating'

Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTree' }

" Plug 'krisajenkins/vim-projectlocal'
Plug 'AndrewRadev/switch.vim'
Plug 'eshock/vim-matchit'
Plug 'mattn/gist-vim'
Plug 'mattn/webapi-vim'

Plug 'sjl/gundo.vim'
Plug 'othree/html5.vim'

Plug 'rhysd/vim-clang-format'
Plug 'kana/vim-operator-user'

Plug 'mattn/emmet-vim'

" Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }
Plug 'tell-k/vim-autopep8'

Plug 'sbdchd/neoformat'

" Plug 'lilydjwg/colorizer'

Plug 'rust-lang/rust.vim'
" Plug 'fatih/vim-go'

if has('win32') || has('win64')
  Plug 'tbodt/deoplete-tabnine', { 'do': 'powershell.exe .\install.ps1' }
else
  Plug 'tbodt/deoplete-tabnine', { 'do': './install.sh' }
endif

" -------------------------------
" Plug 'w0rp/ale'
" Plug 'Valloric/YouCompleteMe'
" Plug 'zxqfl/tabnine-vim'
" -------------------------------
" Plug 'neoclide/coc.nvim', {'branch': 'release'}
" -------------------------------
" --- SWITCH TO NVIM-LSP --------
" Plug 'prabirshrestha/vim-lsp'
" Plug 'mattn/vim-lsp-settings'
" setlocal omnifunc=lsp#complete
" Plug 'lighttiger2505/deoplete-vim-lsp'
" --------------------------------
Plug 'neovim/nvim-lspconfig'
Plug 'kabouzeid/nvim-lspinstall'
Plug 'nvim-lua/lsp_extensions.nvim'


" --------------------------------
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
let g:deoplete#enable_at_startup = 1

" let g:lsp_settings_filetype_javascript = ['typescript-language-server', 'eslint-language-server']
" let g:lsp_settings_filetype_javascript = ['eslint-language-server']
" let g:lsp_settings_filetype_javascript = ['rome']

" <TAB>: completion for deoplete from https://github.com/Shougo/deoplete.nvim/issues/816
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><s-TAB>  pumvisible() ? "\<C-p>" : "\<TAB>"

" " settings for pyls
" if executable('pyls')
"     " pip install python-language-server
"     au User lsp_setup call lsp#register_server({
"         \ 'name': 'pyls',
"         \ 'cmd': {server_info->['pyls']},
"         \ 'allowlist': ['python'],
"         \ })
" endif



" function! s:on_lsp_buffer_enabled() abort
"     " use omnifunc if you are fine with it.
"     " setlocal omnifunc=lsp#complete
"     if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
"     " some mappings to use, tweak as you wish.
"     nmap <buffer> gd <plug>(lsp-definition)
"     nmap <buffer> gr <plug>(lsp-references)
"     nmap <buffer> gi <plug>(lsp-implementation)
"     nmap <buffer> gt <plug>(lsp-type-definition)
"     nmap <buffer> gq <plug>(lsp-code-action)
"     nmap <buffer> <leader>rn <plug>(lsp-rename)
"     nmap <buffer> [g <Plug>(lsp-previous-diagnostic)
"     nmap <buffer> ]g <Plug>(lsp-next-diagnostic)
"     nmap <buffer> K <Plug>(lsp-hover)
"     nmap <buffer> ga <Plug>(lsp-code-action)
" endfunction


func! GodotSettings() abort
    setlocal foldmethod=expr
    setlocal tabstop=4
    setlocal noexpandtab
    nnoremap <buffer> <F4> :GodotRunLast<CR>
    nnoremap <buffer> <F5> :GodotRun<CR>
    nnoremap <buffer> <F6> :GodotRunCurrent<CR>
    nnoremap <buffer> <F7> :GodotRunFZF<CR>
endfunc
augroup godot | au!
    au FileType gdscript call GodotSettings()
augroup end


augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" whether to enable diagnostics for vim-lsp (we may want to use ALE for other
" plugins for that.
let g:lsp_diagnostics_enabled = 1

let g:lsp_log_verbose = 1
let g:lsp_log_file = expand('~/vim-lsp.log')

" for asyncomplete.vim log
let g:asyncomplete_log_file = expand('~/asyncomplete.log')

" " show diagnostic signs
let g:lsp_diagnostics_signs_enabled = 1
" let g:lsp_diagnostics_signs_error = {'text': '✗'}
" let g:lsp_diagnostics_signs_warning = {'text': '!'}
" let g:lsp_highlights_enabled = 0

" " Do not use virtual text, they are far too obtrusive.
let g:lsp_virtual_text_enabled = 0
" " echo a diagnostic message at cursor position
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_diagnostics_echo_delay = 0
" disabled for now since it breaks in neovim
" TODO: only in neovim?
" let g:lsp_diagnostics_float_cursor = 1
" let g:lsp_diagnostics_float_delay = 0
" " whether to enable highlight a symbol and its references
let g:lsp_highlight_references_enabled = 1
let g:lsp_diagnostics_highlights_enabled = 1
let g:lsp_diagnostics_highlights_delay = 0
let g:lsp_preview_max_width = 80

" https://jdhao.github.io/2020/11/04/replace_deoplete_jedi_for_LSP/
" -------------------------------

" Plug 'ervandew/supertab'
" Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'


" Plug 'numirias/semshi', { 'do': ':UpdateRemotePlugins' }

" if has('nvim')
"   Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
" else
"   Plug 'Shougo/deoplete.nvim'
"   Plug 'roxma/nvim-yarp'
"   Plug 'roxma/vim-hug-neovim-rpc'
" endif
"

map <F4> :ImportName<CR>

" Plug 'davidhalter/jedi-vim'
" TODO: check <F4> mapping to MakeDigraph?
Plug 'chrisbra/unicode.vim'


let g:ycm_python_binary_path = 'python2'

Plug 'cespare/vim-toml'

Plug 'deoplete-plugins/deoplete-lsp'

" Plug 'terryma/vim-multiple-cursors'

call plug#end()

set smartindent

call deoplete#custom#option({
\ 'max_list': 10,
\ 'min_pattern_length': 3,
\ })


let g:jedi#show_call_signatures = "1"
let g:jedi#show_call_signatures_delay = "0"
" let g:jedi#completions_enabled = 1

let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_extra_conf_globlist = ['*']
let g:ycm_show_diagnostics_ui = 1

" let g:ycm_rust_src_path = '~/projects/rust/rust-src/src'

if !exists('g:ycm_semantic_triggers')
  let g:ycm_semantic_triggers = {}
endif
" let g:ycm_semantic_triggers.tex = g:vimtex#re#youcompleteme

" set completeopt-=preview

let g:ale_c_build_dir = "./build"
let g:ale_cpp_gcc_options = '-std=c++11 -Iversions/1.12.2/include'


" let g:ale_completion_enabled = 1
let g:ale_fixers = {
      \ 'python': [
      \ 'trim_whitespace',
      \ 'add_blank_lines_for_python_control_statements',
      \ 'isort',
      \ ]
      \ }

let g:ale_python_mypy_options = '--ignore-missing-imports'
" TODO: add pylint when 2.1 is released, check https://pypi.org/project/pylint/
let g:ale_linters = {
      \ 'python': [ 'flake8', 'mypy' ],
      \ 'sh': ['shell', 'shellcheck'],
      \ 'go': ['gofmt', 'govet', 'revive', 'staticcheck', 'golangci-lint'],
      \ 'zsh': ['shell']
      \ }
" \ 'autopep8'
"
let g:ale_go_revive_options = '-config=.revive.toml'

set synmaxcol=7000

let g:airline_powerline_fonts = 1
" let g:airline_theme='simple'
let g:airline_theme='base16_default'

" TODO: add back yapf when https://github.com/sbdchd/neoformat/issues/126 is fixed
let g:neoformat_enabled_python = ['autopep8', 'docformatter', 'black']
" let g:neoformat_enabled_python = ['autopep8', 'docformatter']
let g:neoformat_run_all_formatters = 1

let mapleader=','
let maplocalleader=','

let g:VimuxOrientation = 'h'
let g:airline_powerline_fonts = 1

" " SuperTab like snippets behavior.
" " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
" "imap <expr><TAB>
" " \ pumvisible() ? "\<C-n>" :
" " \ neosnippet#expandable_or_jumpable() ?
" " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
" smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
"
" " For conceal markers.
" if has('conceal')
"   set conceallevel=2 concealcursor=niv
" endif


" Set updatetime for CursorHold
" 300ms of no cursor movement to trigger CursorHold
" set updatetime=300
" Show diagnostic popup on cursor hold
" autocmd CursorHold * lua vim.lsp.diagnostic.show_line_diagnostics()

lua << EOF
local nvim_lsp = require('lspconfig')

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  --Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
  buf_set_keymap('n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)

end

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
-- local servers = { 'pyright', 'rust_analyzer', 'tsserver' }
-- local servers = { 'rust_analyzer' }

-- for _, lsp in ipairs(servers) do
--   nvim_lsp[lsp].setup {
--     on_attach = on_attach,
--     flags = {
--       debounce_text_changes = 150,
--     }
--   }
-- end

local function setup_servers()
  require'lspinstall'.setup()
  local servers = require'lspinstall'.installed_servers()
  for _, server in pairs(servers) do
    nvim_lsp[server].setup{
      on_attach = on_attach,
      flags = {
        debounce_text_changes = 150,
      }
    }
  end

  nvim_lsp.gdscript.setup {
    on_attach = function (client)
      local _notify = client.notify
      client.notify = function (method, params)
        if method == 'textDocument/didClose' then
            -- Godot doesn't implement didClose yet
            return
        end
        _notify(method, params)
      end
    end
  }
end

setup_servers()

-- Automatically reload after `:LspInstall <server>` so we don't have to restart neovim
require'lspinstall'.post_install_hook = function ()
  setup_servers() -- reload installed servers
  vim.cmd("bufdo e") -- this triggers the FileType autocmd that starts the server
end


-- Enable diagnostics
vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
  vim.lsp.diagnostic.on_publish_diagnostics, {
    virtual_text = true,
    signs = true,
    update_in_insert = true,
  }
)
EOF


" Enable type inlay hints
autocmd CursorMoved,InsertLeave,BufEnter,BufWinEnter,TabEnter,BufWritePost *
\ lua require'lsp_extensions'.inlay_hints{ prefix = '', highlight = "Comment", enabled = {"TypeHint", "ChainingHint", "ParameterHint"} }


" TODO: smazat
" " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
" let g:UltiSnipsExpandTrigger='<c-j>'
" let g:UltiSnipsJumpForwardTrigger='<c-j>'
" let g:UltiSnipsJumpBackwardTrigger='<c-k>'
"
" " If you want :UltiSnipsEdit to split your window.
" let g:UltiSnipsEditSplit='vertical'
"
" " let g:UltiSnipsExpandTrigger       = '<tab>'
" " let g:UltiSnipsJumpForwardTrigger  = '<tab>'
" " let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
" " let g:UltiSnipsSnippetDirectories  = ['snips']
"
" function! g:UltiSnips_Complete()
"   call UltiSnips#ExpandSnippet()
"   if g:ulti_expand_res == 0
"     if pumvisible()
"       return "\<C-n>"
"     else
"       call UltiSnips#JumpForwards()
"       if g:ulti_jump_forwards_res == 0
"         return "\<TAB>"
"       endif
"     endif
"   endif
"   return ''
" endfunction
"
" aug ultisnips_insert_enter_expand
"   autocmd!
"   autocmd InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
" aug END
" TODO END





" Ultisnips YouCompleteMe integration https://stackoverflow.com/questions/14896327/ultisnips-and-youcompleteme
" function! g:UltiSnips_Complete()
"   call UltiSnips#ExpandSnippet()
"   if g:ulti_expand_res == 0
"     if pumvisible()
"       return "\<C-n>"
"     else
"       call UltiSnips#JumpForwards()
"       if g:ulti_jump_forwards_res == 0
"         return "\<TAB>"
"       endif
"     endif
"   endif
"   return ""
" endfunction
"
" function! g:UltiSnips_Reverse()
"   call UltiSnips#JumpBackwards()
"   if g:ulti_jump_backwards_res == 0
"     return "\<C-P>"
"   endif
"
"   return ""
" endfunction
"
"
" if !exists("g:UltiSnipsJumpForwardTrigger")
"   let g:UltiSnipsJumpForwardTrigger = "<tab>"
" endif
"
" if !exists("g:UltiSnipsJumpBackwardTrigger")
"   let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
" endif
"
" au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger     . " <C-R>=g:UltiSnips_Complete()<cr>"
" au InsertEnter * exec "inoremap <silent> " .     g:UltiSnipsJumpBackwardTrigger . " <C-R>=g:UltiSnips_Reverse()<cr>"


set foldlevelstart=200
let g:haskell_conceal       = 0
let g:haskell_quasi         = 1
let g:haskell_interpolation = 0
let g:haskell_regex         = 0
let g:haskell_jmacro        = 0
let g:haskell_shqq          = 0
let g:haskell_sql           = 0
let g:haskell_json          = 0
let g:haskell_xml           = 0

" gist-vim defaults
if has('mac')
  let g:gist_clip_command = 'pbcopy'
elseif has('unix')
  let g:gist_clip_command = 'xclip -selection clipboard'
endif
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1
let g:gist_post_private = 1

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden
set scrolloff=9
" TODO: for some reason this breaks
" set deco

" set number
" set relativenumber
set nonumber
set norelativenumber
set noshowmode

" TODO - check if this is still necessary in vim
" Set encoding
set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8
set fileencodings=ucs-bom,utf8,latin2 " ,latin1,default

" TODO: global mark

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" set kmp=czech-qwerty

set list listchars=tab:--,trail:.

set backupcopy=yes

set hlsearch
set incsearch

" Make searches case-sensitive only if they contain upper-case characters
set ignorecase
set smartcase
nnoremap <CR> :nohlsearch<CR>/<BS>

" TODO - how does this differ from "longest,list" only?
" Tab completion
set wildmode=list:longest,list:full
set wildignore+=obj,*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*,node_modules,tmp,project/target,target,tags,CMakeFiles,bower_components,dist,_darcs,vcr,app/assets/images,*.dSYM,*.pyc,_build,rel,*.a,priv/static,*.aux,*.dvi,*.xmpi,*.out,*.lot,*.lof,*.blg,*.bbl,*.toc,__pycache__,build,logs,tags
let NERDTreeRespectWildIgnore=1

" TODO - what is the default behavior?
" Remap the tab key to do autocompletion or indentation depending on the
" context (from http://www.vim.org/tips/tip.php?tip_id=102)
" function! InsertTabWrapper()
"     let col = col('.') - 1
"     if !col || getline('.')[col - 1] !~ '\k'
"         return "\<tab>"
"     else
"         return "\<c-p>"
"     endif
" endfunction
"
" inoremap <tab> <c-r>=InsertTabWrapper()<cr>
" inoremap <s-tab> <c-n>

command! W :w

cmap w!! w !sudo tee > /dev/null %

" Status bar
set winwidth=75

" Use modeline overrides
set modeline
set modelines=10

set t_Co=256
set background=dark
" set termguicolors

let base16colorspace=256  " Access colors present in 256 colorspace
" color base16-material-palenight
color base16-default
" color Tomorrow-Night-Eighties

" Directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

" Remember last location in file
aug last_location
  au!
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
aug END

" Save undo history
if has('persistent_undo')
  set undofile
  if !isdirectory($HOME . '/.vimundo')
    silent !mkdir ~/.vimundo > /dev/null 2>&1
  endif
  set undodir=~/.vimundo
endif

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Show (partial) command in the status line
set showcmd

" Remove scrollbars
set guioptions-=L
set guioptions-=r
set guioptions-=T

if has('gui_running')
  " Automatically resize splits when resizing MacVim window
  aug vim_gui_resized
    autocmd!
    autocmd VimResized * wincmd =
  aug END

  set visualbell
  " color Tomorrow-Night
  set lines=40
  set columns=120
endif

" Highlight current line
set cursorline
" set cursorcolumn

" Buffer resizing with arrow keys
nnoremap <Up> <C-w>5-
nnoremap <Down> <C-w>5+
nnoremap <Left> <C-w>5<
nnoremap <Right> <C-w>5>

" nnoremap - :Switch<cr>
nnoremap - :Neoformat<cr>

nnoremap ; :
" nnoremap : ;

" nnoremap <leader>jd :YcmCompleter GoTo<CR>
" nnoremap <leader>jf :YcmCompleter GoToDefinition<CR>
" nnoremap <leader>je :YcmCompleter GoToDeclaration<CR>
" nnoremap <leader>gt :YcmCompleter GetType<CR>
" nnoremap <leader>gq :YcmCompleter GetDoc<CR>
nnoremap <leader>ge :e ~/.vimrc<CR>
nnoremap <leader>gn :ALENext<CR>
nnoremap <leader>gp :ALEPrevious<CR>
" nnoremap <leader>gr :Semshi rename<CR>

" Rails specific keystrokes
" noremap <leader>gr :topleft :split config/routes.rb<CR>
noremap <leader>gg :topleft 50 :split Gemfile<CR>

noremap <leader>gv :FZF app/views<cr>
noremap <leader>gc :FZF app/controllers<cr>
noremap <leader>gm :FZF app/models<cr>
noremap <leader>gs :FZF app/services<cr>
noremap <leader>gh :FZF app/helpers<cr>
noremap <leader>gl :FZF lib<cr>
noremap <leader>gk :FZF app/assets/stylesheets<cr>
noremap <leader>gj :FZF app/assets/javascripts<cr>
noremap <leader>gr :FZF spec/<CR>


" Expand %% to directory path of current buffer
cnoremap %% <C-R>=expand('%:h').'/'<CR>
nnoremap <Leader>e :call VimuxRunCommand("make")<cr>
" nnoremap <leader>r :call VimuxRunCommand("make ". expand("%h"))<cr>
nnoremap <leader>r :call VimuxRunCommand("make test")<cr>
nnoremap <leader>c :call VimuxRunCommand("make clean")<cr>

" Inserts the path of the currently edited file in command mode
cnoremap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Open files with <leader>f
noremap <leader>f  :Files ./<CR>
" Open files, limited to the directory of the current files, with <leader>gf
noremap <leader>F  :FZF %%<CR>
" TODO: this or coc-python format?
" noremap <leader>gf :GFiles ./<CR>

" TODO: find a better hotkey
" noremap <leader>gd :GFiles?<cr>


nnoremap <leader>gt :Tags<cr>
nnoremap <leader>ga :Rg<cr>
nnoremap <leader>gd :Rg <C-r><C-w><cr>


" noremap <leader>a :TestSuite<cr>
" " Run this file
" noremap <leader>t :TestFile<cr>
" " Run only the example under the cursor
" noremap <leader>T :TestNearest<cr>

map <Leader>tt :call RunCurrentSpecFile()<CR>
map <Leader>T :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

nnoremap <leader>b :Buffers<cr>
nnoremap <leader>B :BTags<cr>

nnoremap <C-a> ^
nnoremap <C-e> $

inoremap <C-a> <Home>
inoremap <C-e> <End>

" For easier navigation between windows
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-h> <C-w><C-h>
nnoremap <C-l> <C-w><C-l>

vnoremap - :Neoformat<cr>

" Bubble multiple lines
vnoremap <C-Up> <C-w><C-k>
vnoremap <C-Down> <C-w><C-j>
vnoremap <C-Left> <C-w><C-h>
vnoremap <C-Right> <C-w><C-l>

" fat fingers
noremap <F1> <Esc>

inoremap <C-X><C-@> <C-A>


" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
" imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
" imap <c-x><c-l> <plug>(fzf-complete-line)

xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" Disable accidental ex mode
nmap Q <NOP>

" Switching between active files in a buffer.
nnoremap <leader><leader> <c-^>

" CTags - TODO - find a good hotkey for this
" # TODO: ignore from a file?
noremap <leader>lt :!ctags --extras=+f --exclude=build --exclude=public --exclude=target --exclude=node_modules --exclude=.git -R *<CR>
noremap <C-\> :tnext<CR>

noremap <silent> <leader>y :<C-u>silent '<,'>w !pbcopy<CR>

" https://github.com/junegunn/fzf.vim/issues/544
" if has('nvim')
"   au TermOpen * tnoremap <Esc> <c-\><c-n>
"   au TermOpen * tnoremap <C-c> <c-\><c-n>
"   au TermOpen * tnoremap <C-g> <c-\><c-n>
"   au FileType fzf tunmap <Esc>
" endif

if has("nvim")
  au TermOpen * tnoremap <buffer> <Esc> <c-\><c-n>
  au FileType fzf tunmap <buffer> <Esc>
endif

" TODO m1 ... bug? disabled for now
" au FileType fzf tunmap <Esc>
" au FileType fzf tunmap <C-c>
" au FileType fzf tunmap <C-g>
" TODO m1 ... bug?


" augroup fmt
"   autocmd!
"   autocmd BufWritePre *.go undojoin | Neoformat
" augroup END

let g:jedi#smart_auto_mappings = 0

aug various_file_types
  autocmd!
  " Rakefile, Vagrantfile and Gemfile are Ruby
  autocmd BufRead,BufNewFile {Capfile,Gemfile,Rakefile,Vagrantfile,config.ru} set ft=ruby
  autocmd BufRead,BufNewFile *.asm set ft=nasm

  " add json syntax highlighting
  " autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescript.tsx

  autocmd BufNewFile,BufRead *.slime set filetype=slim

  autocmd BufNewFile,BufRead *.conf set filetype=conf
  autocmd BufNewFile,BufRead *vimrc set filetype=vim

  autocmd BufNewFile,BufRead *.md set wrap
  autocmd BufNewFile,BufRead *.markdown inoremap <buffer>_ \_
  autocmd BufNewFile,BufRead *.markdown inoremap <buffer>\\ \\\\\\\\
  autocmd BufNewFile,BufRead *.markdown inoremap <buffer><C-b> \boldsymbol
  " autocmd BufNewFile,BufRead *.markdown inoremap <buffer><C-m> \mathcal

  autocmd BufWritePost .Xresources,Xresources silent execute '!xrdb ~/.Xresources' | redraw | echom 'Xresources reloaded'
aug END

" remove unnecessary whitespaces
noremap <leader>ws :%s/ *$//g<cr><c-o><cr>

set pastetoggle=<F5>
set mouse-=a

nnoremap <F7> :set keymap=czech-qwerty<CR>
nnoremap <F8> :set keymap=<CR>
inoremap <F7> <C-o>:set keymap=czech-qwerty<CR>
inoremap <F8> <C-o>:set keymap=<CR>

nnoremap <F9> :NERDTree<CR>
nnoremap <F12> :e ++enc=iso-8859-2<CR>

let g:clang_format#code_style = 'google'

au BufRead,BufNewFile */funcs/* setfiletype zsh

aug cpp_types
  autocmd!
  autocmd FileType h,cc,c,cpp nnoremap <buffer><C-e> :<C-u>ClangFormat<CR>
  autocmd FileType h,cc,c,cpp nnoremap <buffer><leader>ha :HeaderguardAdd<CR>
  autocmd FileType h,cc,c,cpp vnoremap <buffer><C-e> :ClangFormat<CR>
aug END

autocmd BufNewFile,BufRead * :normal zz

let g:limelight_paragraph_span = 2
" autocmd BufRead,BufNewFile * Limelight 0.5

" let &viewdir=expand("~/.vim/viewdir")
" if !isdirectory(expand(&viewdir))|call mkdir(expand(&viewdir), "p", 451)|endif
"
" " TODO: fix this
" augroup AutoSaveFolds
"   autocmd!
"   autocmd BufWinLeave * mkview
"   autocmd BufWinEnter * silent! loadview
" augroup END

" Include user's local vim config
if filereadable(expand('~/.vimrc.local'))
  source ~/.vimrc.local
endif

if has('user_commands')
  command! -bang -nargs=? -complete=file E e<bang> <args>
  command! -bang -nargs=? -complete=file W w<bang> <args>
  command! -bang -nargs=? -complete=file Wq wq<bang> <args>
  command! -bang -nargs=? -complete=file WQ wq<bang> <args>
  command! -bang Wa wa<bang>
  command! -bang WA wa<bang>
  command! -bang Q q<bang>
  command! -bang QA qa<bang>
  command! -bang Qa qa<bang>
endif

"alphsubs ---------------------- {{{
        execute "digraphs ks " . 0x2096
        execute "digraphs as " . 0x2090
        execute "digraphs es " . 0x2091
        execute "digraphs hs " . 0x2095
        execute "digraphs is " . 0x1D62
        execute "digraphs ks " . 0x2096
        execute "digraphs ls " . 0x2097
        execute "digraphs ms " . 0x2098
        execute "digraphs ns " . 0x2099
        execute "digraphs os " . 0x2092
        execute "digraphs ps " . 0x209A
        execute "digraphs rs " . 0x1D63
        execute "digraphs ss " . 0x209B
        execute "digraphs ts " . 0x209C
        execute "digraphs us " . 0x1D64
        execute "digraphs vs " . 0x1D65
        execute "digraphs xs " . 0x2093
"}}


" if !exists('g:airline_symbols')
"   let g:airline_symbols = {}
" endif

" unicode symbols
" let g:airline_left_sep = '»'
" let g:airline_left_sep = '▶'
" let g:airline_right_sep = '«'
" let g:airline_right_sep = '◀'
" let g:airline_symbols.crypt = '🔒'
" let g:airline_symbols.linenr = '☰'
" let g:airline_symbols.linenr = '␊'
" let g:airline_symbols.linenr = '␤'
" let g:airline_symbols.linenr = '¶'
" let g:airline_symbols.maxlinenr = ''
" let g:airline_symbols.maxlinenr = '㏑'
" let g:airline_symbols.branch = '⎇'
" let g:airline_symbols.paste = 'ρ'
" let g:airline_symbols.paste = 'Þ'
" let g:airline_symbols.paste = '∥'
" let g:airline_symbols.spell = 'Ꞩ'
" let g:airline_symbols.notexists = 'Ɇ'
" let g:airline_symbols.whitespace = 'Ξ'


function! s:profilestop()
  profdel func *
  profdel file *
  " qa!
endfunction

function! s:profilestart()
  profile start vim.profile
  profile func *
  profile file *
endfunction



" runtime coc.vim





command! -nargs=0 StartProfiling call s:profilestart()
command! -nargs=0 StopProfiling call s:profilestop()

set exrc
set secure
