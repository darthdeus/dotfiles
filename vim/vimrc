" This must be first, because it changes other options as a side effect.
set nocompatible

set shell=/bin/sh

if has('python3')
  silent! python3 1
endif

if has('macunix')
  let g:python3_host_prog = '/Users/darth/projects/homebrew/bin/python3'
else
  let g:python3_host_prog = '/usr/bin/python'
endif

call plug#begin('~/.vim/bundle')


" Plug 'jdonaldson/vaxe'
" Plug 'habamax/vim-godot'

Plug 'bounceme/dim-jump'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-scriptease'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-rsi'


Plug 'editorconfig/editorconfig-vim'

Plug 'mileszs/ack.vim'

Plug 'junegunn/gv.vim'
Plug 'mgedmin/python-imports.vim'

" Plug 'calviken/vim-gdscript3'
Plug 'habamax/vim-godot'

" Plug 'lervag/vimtex'
" let g:vimtex_view_method = 'zathura'
" let g:tex_flavor = 'latex'

Plug 'junegunn/goyo.vim'
" Plug 'junegunn/limelight.vim'

Plug 'darthdeus/a.vim'
Plug 'benmills/vimux'

Plug 'chrisbra/vim-zsh'
" Plug 'ludovicchabant/vim-gutentags'

Plug 'LnL7/vim-nix'

" Plug 'rking/ag.vim'
Plug 'octol/vim-cpp-enhanced-highlight'

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'

Plug 'tomtom/tcomment_vim'
Plug 'tomtom/tlib_vim'

Plug 'godlygeek/tabular'

Plug 'itchyny/lightline.vim'

" Plug 'Shougo/echodoc.vim'
" let g:echodoc#enable_at_startup = 1
" let g:echodoc#type = 'virtual'
" let g:echodoc#type = 'floating'

Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTree' }

" Plug 'krisajenkins/vim-projectlocal'
Plug 'AndrewRadev/switch.vim'
Plug 'eshock/vim-matchit'
Plug 'mattn/gist-vim'
Plug 'mattn/webapi-vim'

Plug 'sjl/gundo.vim'
Plug 'othree/html5.vim'

Plug 'rhysd/vim-clang-format'
Plug 'kana/vim-operator-user'

Plug 'mattn/emmet-vim'

Plug 'sbdchd/neoformat'

" Plug 'lilydjwg/colorizer'

" let g:rust_fold = 1

" Plug 'Konfekt/FastFold'
"
" nmap zuz <Plug>(FastFoldUpdate)
" let g:fastfold_savehook = 1
" let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C']
" let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']

Plug 'rust-lang/rust.vim'
" Plug 'rhysd/rust-doc.vim'
Plug 'ron-rs/ron.vim'
Plug 'gutenye/json5.vim'

" Plug 'Shougo/unite.vim'
" if has('nvim')
"   Plug 'Shougo/denite.nvim', { 'do': ':UpdateRemotePlugins' }
" else
"   Plug 'Shougo/denite.nvim'
"   Plug 'roxma/nvim-yarp'
"   Plug 'roxma/vim-hug-neovim-rpc'
" endif

" Plug 'fatih/vim-go'


" -------- COQ -----------------
" " main one
Plug 'ms-jpq/coq_nvim', {'branch': 'coq'}
" " 9000+ Snippets
" Plug 'ms-jpq/coq.artifacts', {'branch': 'artifacts'}
" ---------- DEOPLETE ---------------
let g:deoplete#enable_at_startup = 1
if has('win32') || has('win64')
  Plug 'tbodt/deoplete-tabnine', { 'do': 'powershell.exe .\install.ps1' }
else
  Plug 'tbodt/deoplete-tabnine', { 'do': './install.sh' }
endif
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
Plug 'deoplete-plugins/deoplete-lsp'

" <TAB>: completion for deoplete from https://github.com/Shougo/deoplete.nvim/issues/816
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><s-TAB>  pumvisible() ? "\<C-p>" : "\<TAB>"
" ------------------------------------

Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  " We recommend updating the parsers on update
Plug 'nvim-treesitter/playground'


" -------------------------------
" Plug 'zxqfl/tabnine-vim'
" -------------------------------
Plug 'neovim/nvim-lspconfig'
Plug 'kabouzeid/nvim-lspinstall'
Plug 'nvim-lua/lsp_extensions.nvim'

Plug 'simrat39/rust-tools.nvim'

Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-telescope/telescope.nvim'

Plug 'mfussenegger/nvim-dap'

Plug 'zhimsel/vim-stay'


" --------------------------------


func! GodotSettings() abort
    setlocal foldmethod=expr
    setlocal tabstop=4 noexpandtab autoindent shiftwidth=4
endfunc
augroup godot | au!
    au FileType gdscript call GodotSettings()
augroup end


Plug 'chrisbra/unicode.vim'

let g:ycm_python_binary_path = 'python2'

Plug 'cespare/vim-toml'

call plug#end()

set smartindent

call deoplete#custom#option({
\ 'max_list': 10,
\ 'min_pattern_length': 3,
\ })



set synmaxcol=7000

let g:airline_powerline_fonts = 1
" let g:airline_theme='simple'
let g:airline_theme='base16_default'

" TODO: add back yapf when https://github.com/sbdchd/neoformat/issues/126 is fixed
let g:neoformat_enabled_python = ['autopep8', 'docformatter', 'black']
" let g:neoformat_enabled_python = ['autopep8', 'docformatter']
let g:neoformat_run_all_formatters = 1

let mapleader=','
let maplocalleader=','

let g:VimuxOrientation = 'h'
let g:airline_powerline_fonts = 1

let g:coq_settings = {
      \ 'auto_start': v:false,
      \ 'clients.tabnine.enabled': v:true
      \ }

" " SuperTab like snippets behavior.
" " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
" "imap <expr><TAB>
" " \ pumvisible() ? "\<C-n>" :
" " \ neosnippet#expandable_or_jumpable() ?
" " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
" smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
"
" " For conceal markers.
" if has('conceal')
"   set conceallevel=2 concealcursor=niv
" endif


" Set updatetime for CursorHold
" 300ms of no cursor movement to trigger CursorHold
" set updatetime=300
" Show diagnostic popup on cursor hold
" autocmd CursorHold * lua vim.lsp.diagnostic.show_line_diagnostics()

lua << EOF
local nvim_lsp = require('lspconfig')
local coq = require('coq')

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  --Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<C-w>', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
  buf_set_keymap('n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
end


local opts = {
    tools = { -- rust-tools options
        -- Automatically set inlay hints (type hints)
        autoSetHints = true,

        -- Whether to show hover actions inside the hover window
        -- This overrides the default hover handler
        hover_with_actions = true,

        runnables = {
            -- whether to use telescope for selection menu or not
            use_telescope = true

            -- rest of the opts are forwarded to telescope
        },

        debuggables = {
            -- whether to use telescope for selection menu or not
            use_telescope = true

            -- rest of the opts are forwarded to telescope
        },

        -- These apply to the default RustSetInlayHints command
        inlay_hints = {

            -- Only show inlay hints for the current line
            only_current_line = false,

            -- Event which triggers a refersh of the inlay hints.
            -- You can make this "CursorMoved" or "CursorMoved,CursorMovedI" but
            -- not that this may cause  higher CPU usage.
            -- This option is only respected when only_current_line and
            -- autoSetHints both are true.
            only_current_line_autocmd = "CursorHold",

            -- wheter to show parameter hints with the inlay hints or not
            show_parameter_hints = true,

            -- prefix for parameter hints
            parameter_hints_prefix = "<- ",

            -- prefix for all the other hints (type, chaining)
            other_hints_prefix = "=> ",

            -- whether to align to the length of the longest line in the file
            max_len_align = false,

            -- padding from the left if max_len_align is true
            max_len_align_padding = 1,

            -- whether to align to the extreme right or not
            right_align = false,

            -- padding from the right if right_align is true
            right_align_padding = 7,

            -- The color of the hints
            highlight = "Comment",
        },

        hover_actions = {
            -- the border that is used for the hover window
            -- see vim.api.nvim_open_win()
            border = {
                {"╭", "FloatBorder"}, {"─", "FloatBorder"},
                {"╮", "FloatBorder"}, {"│", "FloatBorder"},
                {"╯", "FloatBorder"}, {"─", "FloatBorder"},
                {"╰", "FloatBorder"}, {"│", "FloatBorder"}
            },

            -- whether the hover action window gets automatically focused
            auto_focus = false
        }
    },

    -- all the opts to send to nvim-lspconfig
    -- these override the defaults set by rust-tools.nvim
    -- see https://github.com/neovim/nvim-lspconfig/blob/master/CONFIG.md#rust_analyzer

    server = {
      on_attach = on_attach,

      settings = {
        ["rust-analyzer"] = {
            assist = {
                importGranularity = "module",
                importPrefix = "by_self",
            },
            cargo = {
                loadOutDirsFromCheck = true
            },
            procMacro = {
                enable = true
            },
        }
      }
    } -- rust-analyer options
}


-- TODO: is this duplicate of the inlay hints that already work?


local function setup_servers()
  require'lspinstall'.setup()
  local servers = require'lspinstall'.installed_servers()
  -- for _, server in pairs(servers) do
  --   nvim_lsp[server].setup{
  --     on_attach = on_attach,
  --     flags = {
  --       debounce_text_changes = 150,
  --     }
  --   }
  -- end

    -- nvim_lsp.rust_analyzer.setup{
    --   on_attach = on_attach,
    --   settings = {
    --     ["rust-analyzer"] = {
    --         diagnostics = {
    --               enable = true,
    --               disabled = {"unresolved-proc-macro"},
    --               enableExperimental = true,
    --           }
    --             -- assist = {
    --             --     importGranularity = "module",
    --             --     importPrefix = "by_self",
    --             -- },
    --             -- cargo = {
    --             --     loadOutDirsFromCheck = true
    --             -- },
    --             -- procMacro = {
    --             --     enable = true
    --             -- },
    --
    --     }
    --   },
    --   flags = {
    --     debounce_text_changes = 150,
    --   }
    -- }

  -- nvim_lsp.gdscript.setup{
  --   on_attach = on_attach,
  --   flags = {
  --     debounce_text_changes = 150,
  --   }
  -- }

  -- nvim_lsp.rust_analyzer.setup({
  --     on_attach=on_attach,
  --     settings = {
  --         ["rust-analyzer"] = {
  --             assist = {
  --                 importGranularity = "module",
  --                 importPrefix = "by_self",
  --             },
  --             cargo = {
  --                 loadOutDirsFromCheck = true
  --             },
  --             procMacro = {
  --                 enable = true
  --             },
  --         }
  --     }
  -- })

  -- nvim_lsp.gdscript.setup {
  --   on_attach = on_attach,
  --   flags = {
  --     debounce_text_changes = 150,
  --   }
  -- }

  -- require('rust-tools').setup(opts)
  require('rust-tools').setup(opts)
  require('rust-tools.inlay_hints').set_inlay_hints()
end

setup_servers()

-- Automatically reload after `:LspInstall <server>` so we don't have to restart neovim
require'lspinstall'.post_install_hook = function ()
  setup_servers() -- reload installed servers
  vim.cmd("bufdo e") -- this triggers the FileType autocmd that starts the server
end


-- Enable diagnostics
vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
  vim.lsp.diagnostic.on_publish_diagnostics, {
    virtual_text = true,
    signs = true,
    update_in_insert = false,
    severity_sort = true,
  }
)

-- require'nvim-treesitter.configs'.setup {
--   ensure_installed = { "rust" }, -- one of "all", "maintained" (parsers with maintainers), or a list of languages
--   ignore_install = { "javascript" }, -- List of parsers to ignore installing
--   highlight = {
--     enable = true,              -- false will disable the whole extension
--     disable = { },  -- list of language that will be disabled
--     -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
--     -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
--     -- Using this option may slow down your editor, and you may see some duplicate highlights.
--     -- Instead of true it can also be a list of languages
--     additional_vim_regex_highlighting = false,
--   },
-- }


require'nvim-treesitter.configs'.setup {
  ensure_installed = {"c", "cpp", "json", "javascript", "go", "python", "rust", "query", "lua"},
  highlight = {
    enable = true,
  },
  incremental_selection = {
    enable = true,
    keymaps = {
      init_selection = "gnn",
      node_incremental = "grn",
      scope_incremental = "rc",
      node_decremental = "grm",
    },
  },
  textobjects = {
      select = {
        enable = true,
        keymaps = {
          -- You can use the capture groups defined in textobjects.scm
          ["af"] = "@function.outer",
          ["if"] = "@function.inner",
          ["ac"] = "@class.outer",
          ["ic"] = "@class.inner",

          -- Or you can define your own textobjects like this
          ["iF"] = {
            python = "(function_definition) @function",
            cpp = "(function_definition) @function",
            c = "(function_definition) @function",
            java = "(method_declaration) @function",
          },
        },
      },
  move = {
      enable = true,
      goto_next_start = {
        ["]a"] = "@function.outer",
        ["]]"] = "@class.outer",
      },
      goto_next_end = {
        ["]A"] = "@function.outer",
        ["]["] = "@class.outer",
      },
      goto_previous_start = {
        ["[a"] = "@function.outer",
        ["[["] = "@class.outer",
      },
      goto_previous_end = {
        ["[A"] = "@function.outer",
        ["[]"] = "@class.outer",
      },
    },

  swap = {
      enable = true,
      swap_next = {
        ["<leader>a"] = "@parameter.inner",
      },
      swap_previous = {
        ["<leader>A"] = "@parameter.inner",
      },
    },
    },
}

-- require('lsp_extensions').inlay_hints{ enabled = {"TypeHint", "ChainingHint", "ParameterHint"} }

-- -- Get the counts from your curreent workspace:
-- local ws_errors = require('lsp_extensions.workspace.diagnostic').get_count(0, 'Error')
-- local ws_hints = require('lsp_extensions.workspace.diagnostic').get_count(0, 'Hint')
--
-- -- Set the qflist for the current workspace
-- --  For more information, see `:help vim.lsp.diagnostic.set_loc_list()`, since this has some of the same configuration.
-- require('lsp_extensions.workspace.diagnostic').set_qf_list()

EOF


" Enable type inlay hints
autocmd CursorMoved,InsertLeave,BufEnter,BufWinEnter,TabEnter,BufWritePost *
\ lua require'lsp_extensions'.inlay_hints{ prefix = '', highlight = "Comment", enabled = {"TypeHint", "ChainingHint", "ParameterHint"} }



" gist-vim defaults
if has('mac')
  let g:gist_clip_command = 'pbcopy'
elseif has('unix')
  let g:gist_clip_command = 'xclip -selection clipboard'
endif
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1
let g:gist_post_private = 1

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden
set scrolloff=9

set nonumber
set norelativenumber
set noshowmode

" TODO - check if this is still necessary in vim
" Set encoding
set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8
set fileencodings=ucs-bom,utf8,latin2 " ,latin1,default

" TODO: global mark

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" set kmp=czech-qwerty

set list listchars=tab:--,trail:.

set backupcopy=yes

set hlsearch
set incsearch

" Make searches case-sensitive only if they contain upper-case characters
set ignorecase
set smartcase
nnoremap <CR> :nohlsearch<CR>/<BS>

" TODO - how does this differ from "longest,list" only?
" Tab completion
set wildmode=list:longest,list:full
set wildignore+=obj,*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*,node_modules,tmp,project/target,target,tags,CMakeFiles,bower_components,dist,_darcs,vcr,app/assets/images,*.dSYM,*.pyc,_build,rel,*.a,priv/static,*.aux,*.dvi,*.xmpi,*.out,*.lot,*.lof,*.blg,*.bbl,*.toc,__pycache__,build,logs,tags
let NERDTreeRespectWildIgnore=1

" TODO - what is the default behavior?
" Remap the tab key to do autocompletion or indentation depending on the
" context (from http://www.vim.org/tips/tip.php?tip_id=102)
" function! InsertTabWrapper()
"     let col = col('.') - 1
"     if !col || getline('.')[col - 1] !~ '\k'
"         return "\<tab>"
"     else
"         return "\<c-p>"
"     endif
" endfunction
"
" inoremap <tab> <c-r>=InsertTabWrapper()<cr>
" inoremap <s-tab> <c-n>

command! W :w

cmap w!! w !sudo tee > /dev/null %

" Status bar
set winwidth=75

" Use modeline overrides
set modeline
set modelines=10

set t_Co=256
set background=dark
" set termguicolors

let base16colorspace=256  " Access colors present in 256 colorspace
" color base16-material-palenight
color base16-default
" color Tomorrow-Night-Eighties

" Directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

" Remember last location in file
aug last_location
  au!
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
aug END

" Save undo history
if has('persistent_undo')
  set undofile
  if !isdirectory($HOME . '/.vimundo')
    silent !mkdir ~/.vimundo > /dev/null 2>&1
  endif
  set undodir=~/.vimundo
endif

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Show (partial) command in the status line
set showcmd

set cursorline
set nocursorcolumn

if has('gui_running')
  " Automatically resize splits when resizing MacVim window
  aug vim_gui_resized
    autocmd!
    autocmd VimResized * wincmd =
  aug END

  set visualbell
  set lines=40
  set columns=120

  " Remove scrollbars
  set guioptions-=L
  set guioptions-=r
  set guioptions-=T
endif


" Buffer resizing with arrow keys
nnoremap <Up> <C-w>5-
nnoremap <Down> <C-w>5+
nnoremap <Left> <C-w>5<
nnoremap <Right> <C-w>5>

" nnoremap - :Switch<cr>
nnoremap - :Neoformat<cr>
" nnoremap - :RustFmt<cr>

nnoremap ; :
" nnoremap : ;

nnoremap <leader>ge :e ~/.vimrc<CR>


" Expand %% to directory path of current buffer
cnoremap %% <C-R>=expand('%:h').'/'<CR>
nnoremap <Leader>e :call VimuxRunCommand("make")<cr>
nnoremap <F5> :call VimuxRunCommand("make")<cr>
nnoremap <F4> :call VimuxRunCommand("make")<cr>
" nnoremap <leader>r :call VimuxRunCommand("make ". expand("%h"))<cr>
nnoremap <leader>r :call VimuxRunCommand("make test")<cr>
nnoremap <leader>c :call VimuxRunCommand("make clean")<cr>

" Inserts the path of the currently edited file in command mode
cnoremap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Open files with <leader>f
noremap <leader>f  :Files ./<CR>
" Open files, limited to the directory of the current files, with <leader>gf
noremap <leader>F  :FZF %%<CR>

nnoremap <leader>gt :Tags<cr>
nnoremap <leader>ga :Rg<cr>
nnoremap <leader>gd :Rg <C-r><C-w><cr>

nnoremap <leader>b :Buffers<cr>
nnoremap <leader>B :BTags<cr>

nnoremap <C-a> ^
nnoremap <C-e> $

" TODO: figure out how to remap these?
" nunmap ]f
" nunmap [f

inoremap <C-a> <Home>
inoremap <C-e> <End>

" For easier navigation between windows
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-h> <C-w><C-h>
nnoremap <C-l> <C-w><C-l>

vnoremap - :Neoformat<cr>

" Bubble multiple lines
vnoremap <C-Up> <C-w><C-k>
vnoremap <C-Down> <C-w><C-j>
vnoremap <C-Left> <C-w><C-h>
vnoremap <C-Right> <C-w><C-l>

" fat fingers
noremap <F1> <Esc>

inoremap <C-X><C-@> <C-A>

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
" imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
" imap <c-x><c-l> <plug>(fzf-complete-line)

xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" Disable accidental ex mode
nmap Q <NOP>

" Switching between active files in a buffer.
nnoremap <leader><leader> <c-^>

" CTags - TODO - find a good hotkey for this
" # TODO: ignore from a file?
noremap <leader>lt :!ctags --extras=+f --exclude=build --exclude=public --exclude=target --exclude=node_modules --exclude=.git -R *<CR>
noremap <C-\> :tnext<CR>

noremap <silent> <leader>y :<C-u>silent '<,'>w !pbcopy<CR>

" https://github.com/junegunn/fzf.vim/issues/544
" if has('nvim')
"   au TermOpen * tnoremap <Esc> <c-\><c-n>
"   au TermOpen * tnoremap <C-c> <c-\><c-n>
"   au TermOpen * tnoremap <C-g> <c-\><c-n>
"   au FileType fzf tunmap <Esc>
" endif

if has("nvim")
  au TermOpen * tnoremap <buffer> <Esc> <c-\><c-n>
  au FileType fzf tunmap <buffer> <Esc>
endif

" TODO m1 ... bug? disabled for now
" au FileType fzf tunmap <Esc>
" au FileType fzf tunmap <C-c>
" au FileType fzf tunmap <C-g>
" TODO m1 ... bug?


" augroup fmt
"   autocmd!
"   autocmd BufWritePre *.go undojoin | Neoformat
" augroup END

let g:jedi#smart_auto_mappings = 0

aug various_file_types
  autocmd!
  " Rakefile, Vagrantfile and Gemfile are Ruby
  autocmd BufRead,BufNewFile {Capfile,Gemfile,Rakefile,Vagrantfile,config.ru} set ft=ruby
  autocmd BufRead,BufNewFile *.asm set ft=nasm

  " add json syntax highlighting
  " autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescript.tsx

  autocmd BufNewFile,BufRead *.slime set filetype=slim

  autocmd BufNewFile,BufRead *.conf set filetype=conf
  autocmd BufNewFile,BufRead *vimrc set filetype=vim

  autocmd BufNewFile,BufRead *.md set wrap
  autocmd BufNewFile,BufRead *.markdown inoremap <buffer>_ \_
  autocmd BufNewFile,BufRead *.markdown inoremap <buffer>\\ \\\\\\\\
  autocmd BufNewFile,BufRead *.markdown inoremap <buffer><C-b> \boldsymbol
  " autocmd BufNewFile,BufRead *.markdown inoremap <buffer><C-m> \mathcal

  autocmd BufWritePost .Xresources,Xresources silent execute '!xrdb ~/.Xresources' | redraw | echom 'Xresources reloaded'
aug END

" remove unnecessary whitespaces
noremap <leader>ws :%s/ *$//g<cr><c-o><cr>

set pastetoggle=<F3>
set mouse-=a

nnoremap <F7> :set keymap=czech-qwerty<CR>
nnoremap <F8> :set keymap=<CR>
inoremap <F7> <C-o>:set keymap=czech-qwerty<CR>
inoremap <F8> <C-o>:set keymap=<CR>

nnoremap <F9> :NERDTree<CR>
nnoremap <F12> :e ++enc=iso-8859-2<CR>

au BufRead,BufNewFile */funcs/* setfiletype zsh

autocmd BufNewFile,BufRead * :normal zz

let g:limelight_paragraph_span = 2
" autocmd BufRead,BufNewFile * Limelight 0.5

" Include user's local vim config
if filereadable(expand('~/.vimrc.local'))
  source ~/.vimrc.local
endif

if has('user_commands')
  command! -bang -nargs=? -complete=file E e<bang> <args>
  command! -bang -nargs=? -complete=file W w<bang> <args>
  command! -bang -nargs=? -complete=file Wq wq<bang> <args>
  command! -bang -nargs=? -complete=file WQ wq<bang> <args>
  command! -bang Wa wa<bang>
  command! -bang WA wa<bang>
  command! -bang Q q<bang>
  command! -bang QA qa<bang>
  command! -bang Qa qa<bang>
endif

"alphsubs ---------------------- {{{
        execute "digraphs ks " . 0x2096
        execute "digraphs as " . 0x2090
        execute "digraphs es " . 0x2091
        execute "digraphs hs " . 0x2095
        execute "digraphs is " . 0x1D62
        execute "digraphs ks " . 0x2096
        execute "digraphs ls " . 0x2097
        execute "digraphs ms " . 0x2098
        execute "digraphs ns " . 0x2099
        execute "digraphs os " . 0x2092
        execute "digraphs ps " . 0x209A
        execute "digraphs rs " . 0x1D63
        execute "digraphs ss " . 0x209B
        execute "digraphs ts " . 0x209C
        execute "digraphs us " . 0x1D64
        execute "digraphs vs " . 0x1D65
        execute "digraphs xs " . 0x2093
"}}


function! s:profilestop()
  profdel func *
  profdel file *
  " qa!
endfunction

function! s:profilestart()
  profile start vim.profile
  profile func *
  profile file *
endfunction



" set foldmethod=expr
" set foldexpr=nvim_treesitter#foldexpr()


command! -nargs=0 StartProfiling call s:profilestart()
command! -nargs=0 StopProfiling call s:profilestop()

set exrc
set secure
