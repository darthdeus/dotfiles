*NERD_snippets.txt*  Snippets for vim.
*NERDSnippets*



        lock up your daughters! its ...~

        _   ____________  ____     _____       _                  __      ~
       / | / / ____/ __ \/ __ \   / ___/____  (_)___  ____  ___  / /______~
      /  |/ / __/ / /_/ / / / /   \__ \/ __ \/ / __ \/ __ \/ _ \/ __/ ___/~
     / /|  / /___/ _, _/ /_/ /   ___/ / / / / / /_/ / /_/ /  __/ /_(__  ) ~
    /_/ |_/_____/_/ |_/_____/   /____/_/ /_/_/ .___/ .___/\___/\__/____/  ~
                                            /_/   /_/                     ~


                              Reference Manual~

==============================================================================
CONTENTS                                               *nerdsnippets-contents*

 |nerdsnippets-introduction|           Introduction
 |nerdsnippets-defining-snippets|      Defining snippets
 |nerdsnippets-global-functions|           Global functions
 |nerdsnippets-global-snippets|            Global snippets
 |nerdsnippets-snippet-indentation|        Snippet indentation
 |nerdsnippets-snippet-magic|              Snippet escape sequences
 |nerdsnippets-snippet-setup-file|     The snippet setup file
 |nerdsnippets-example-snippets|       Example snippets
 |nerdsnippets-options|                Options
 |nerdsnippets-about|                  About
 |nerdsnippets-license|                License


==============================================================================
INTRODUCTION                                    *nerdsnippets-introduction*

It is a proven scientific fact that typing the same code over and over again
sucks balls. Therefore, this plugin provides a snippet engine to reduce the
amount of mindless repitition vim users have to do. For science.

Using this plugin you can create file based snippets. Once you have created a
snippet you can insert it into a file by typing the snippet keyword then
pressing <tab>. From there you can jump to the snippet "markers" by pressing
<tab> again. There are more features detailed in this document.

==============================================================================
DEFINING SNIPPETS                             *nerdsnippets-defining-snippets*


------------------------------------------------------------------------------
THE GLOBAL FUNCTIONS                           *nerdsnippets-global-functions*

The script provides the following functions for you to specify snippets.

                                                         *NERDSnippetsReset()*
NERDSnippetsReset()
    Use this function to clear all snippets from memory. Put this at the top
    of your snippet setup script so you can |:source| it again when you change
    your snippets.

        *NERDSnippetsFromDirectory()* *NERDSnippetsFromDirectoryForFiletype()*
These two functions are used to extract snippets from a directory tree. Both
functions recursively look for .snippet files and assume a certain directory
structure from which the snippets filetype, keyword and possibly name are
inferred.

NERDSnippetsFromDirectory(dir)
    Extracts snippets from the given directory.

    Assumed file/directory naming scheme:

    For single snippets >
        a:dir/<filetype>/<keyword>.snippet
<
    eg >
        ~/.vim/snippets/html/href.snippet
<
    For multiple snippets bound to a single keyword >
        a:dir/<filetype>/<keyword>/<snippet-name>.snippet
<
    eg >
        ~/.vim/snippets/html/table/simple-table.snippet
        ~/.vim/snippets/html/table/table-with-class.snippet
<

NERDSnippetsFromDirectoryForFiletype(dir, filetype)
    Extracts snippets from the given directory for the given filetype.

    Assumed file/directory naming scheme:

    For single snippets >
        a:dir/<keyword>.snippet
<
    eg >
        ~/.vim/snippets/html/href.snippet
<
    For multiple snippets bound to a single keyword >
        a:dir/<keyword>/<snippet-name>.snippet
<
    eg >
        ~/.vim/snippets/html/table/simple-table.snippet
        ~/.vim/snippets/html/table/table-with-class.snippet
<
    The main purpose of this function is to allow you to manually associate a
    collection of snippets with a filetype. For example, you probably want all
    your html snippets to also be used for the xhtml filetype. So you could
    call this in your setup file: >
        NERDSnippetsFromDirectoryForFiletype('~/.vim/snippets/html', 'xhtml')
<
                              *NS_prompt()* *NS_camelcase()* *NS_underscore()*

NS_prompt(variable_name, prompt, default_value)
    This function is how NERD Snippets implements mirroring. It is essentially
    a wrapper for the built in |input()| function. Use it to extract values
    from the user which you can then use and manipulate at any point in the
    snippet. See the example snippets section for more info.

NS_camelcase(string), NS_underscore(string)
    These two functions convert a string between the camelcase (FooBarBaz) and
    the underscored (foo_bar_baz) versions. They are included in the script as
    example helper functions and because they have turned out to be very
    helpful in my snippets.

------------------------------------------------------------------------------
GLOBAL SNIPPETS                                 *nerdsnippets-global-snippets*
Global snippets are snippets that are available for all filetypes.
They are treated as though their filetype is _. For example: >
    ~/.vim/snippets/_/aGlobalSnippet.snippet
<

------------------------------------------------------------------------------
SNIPPET INDENTATION                         *nerdsnippets-snippet-indentation*

Snippets are stored as sequences of keypresses and therefore do not contain
any indentation. Indentation is done on-the-fly as you insert them into a
file. They are indented according to your indent settings at the time of use.

You should still define your snippets with indentation (for readability), but
know that it is removed when they are processed.

------------------------------------------------------------------------------
SNIPPET MAGIC                                     *nerdsnippets-snippet-magic*

There are two important escape sequences to know about when defining
snippets.

    \<C-R>=an_expression\<CR>
    Will insert the value of an_expression into the snippet when it is used.

    \<C-O>a_normal_mode_command\<CR>
    Will execute a_normal_mode_command when the snippet is used.


==============================================================================
SNIPPET SETUP FILE                           *nerdsnippets-snippet-setup-file*

Once you have created your snippets, you have to tell NERD snippets about
them. The easiest way to do this is to create a snippet setup file here: >
    ~/.vim/after/plugin/snippet_setup.vim
<
Call the file whatever you want, but its important to stick it in
the after/plugin directory.

A typical setup file would look something like this >

    "remove all snippets from memory so we can source this script after
    "modifying our snippets
    call NERDSnippetsReset()

    "slurp up all our snippets
    call NERDSnippetsFromDirectory("~/.vim/snippets")

    "use our html snippets for eruby and xhtml too
    call NERDSnippetsFromDirectoryForFiletype('~/.vim/snippets/html', 'eruby')
    call NERDSnippetsFromDirectoryForFiletype('~/.vim/snippets/html', 'xhtml')

    "support functions that are called from our snippets
    "---------------------------------------------------

    function! Snippet_RubyClassNameFromFilename()
        let name = expand("%:t:r")
        return NS_camelcase(name)
    endfunction

    function! Snippet_MigrationNameFromFilename()
        let name = substitute(expand("%:t:r"), '^.\{-}_', '', '')
        return NS_camelcase(name)
    endfunction
<
==============================================================================
EXAMPLE SNIPPETS                               *nerdsnippets-example-snippets*

Here are some example snippets to demonstrate the features of the script.
Note that the examples assume that all snippets are located in
~/.vim/snippets/ and that >
    NERDSnippetsFromDirectory('~/.vim/snippets')
<
was called.

For more example snippets see |nerdsnippets-about|.

Example 1: a for loop for java~

    Snippet location: ~/.vim/snippets/java/for.snippet
>
    for(<+int i=0+>; <++>; <+i+++>){
        <++>
    }
<
    There are 4 markers:
    1. <+int i=0+>
    2. <++>
    3. <+i+++>
    4. <++>

    1 and 3 have default values. When you tab to them, they will be
    replaced with the text "int i=0" and "i++".

    2 and 4 are empty markers, these markers are removed when the cursor
    arrives on them.

Example 2: validates_presence_of for rails~

    Snippet location: ~/.vim/snippets/ruby/vpo.snippet
>
    validates_presence_of :<+attribute+><+, :on => :<+create+>, :message => "<+can't be blank+>"+>
<
    Notice how the second marker:
>
    <+, :on => :<+create+>, :message => "<+can't be blank+>"+>
<
    has 2 markers nested inside it. When you tab to this marker you can either
    hit tab again to "tab into" it, or hit backspace/ctrl-h or enter to delete
    it and move on. This way you can create "optional" parts to a snippet.


Example 3: global modeline snippet~

    Assumes this function is defined in the snippet setup file:
>
    function! ModelineSnippet()
      let start = substitute(&cms, '^\([^ ]*\)\s*%s\(.*\)$', '\1', '')
      let end = substitute(&cms, '^.*%s\(.*\)$', '\1', '')
      return start . " vim: set <+settings+>:" . end
    endfunction
<
    Snippet location: ~/.vim/snippets/_/modeline.snippet
    The snippet code:
>
    \<C-R>=ModelineSnippet()\<CR>
<
    Here we have a snippet that uses some more complex logic, so we get a
    function to generate the snippet code for us.

Example 4: ruby class snippet~

    Assumes this function is defined in the snippet setup file:
>
    function! Snippet_RubyClassNameFromFilename()
        let name = expand("%:t:r")
        return NS_camelcase(name)
    endfunction
<

    Snippet location: ~/.vim/snippets/ruby/class.snippet
    The snippet code:
>
    class <+\<c-r>=Snippet_RubyClassNameFromFilename()\<CR>+>
        <++>
    end
<
    Here if we are in a file called foo_bar.rb, the following code would be
    inserted:
>
    class FooBar
        <++>
    end
<
    "FooBar" would be selected and ready to type over if needed.

Example 5: two snippets bound to a single keyword~

    Here we have 2 snippets that are both bound to the same keyword (table)

    Snippet locations: ~/.vim/snippets/html/table/simple.snippet
                       ~/.vim/snippets/html/table/hardcore.snippet

    simple.snippet:
>
    <table class="<++>">
      <++>
    </table>
<
    hardcore.snippet:
>
    <table<+ width="<+100%+>" border="<+0+>" cellspacing="<+0+>" cellpadding="<+5+>"<++>+>>
        <tr>
            <th><++></th>
        </tr>

        <tr>
            <td></td>
        </tr>
    </table>
<
    When you type    table<tab>    the script will ask you which snippet to
    insert.

Example 6: the standard rails code for an update action with mirroring~

    Snippet location: ~/.vim/snippets/ruby/defupdate.snippet
>
    def update
      @\<c-r>=NS_underscore(NS_prompt("snippet_classname", "Model ClassName", ""))\<cr> = \<c-r>=snippet_classname\<cr>.find(params[:id])

      respond_to do |wants|
        if @\<c-r>=NS_underscore(snippet_classname)\<cr>.update_attributes(params[:\<c-r>=NS_underscore(snippet_classname)\<cr>])
          flash[:notice] = '\<c-r>=snippet_classname\<cr> was successfully updated.'
          wants.html { redirect_to(@\<c-r>=NS_underscore(snippet_classname)\<cr>) }
          wants.xml  { head :ok }
        else
          wants.html { render :action => "edit" }
          wants.xml  { render :xml => @\<c-r>=NS_underscore(snippet_classname)\<cr>.errors, :status => :unprocessable_entity }
        end
      end
    end
<
    When you type   defupdate<tab>   the script will prompt you for the value
    of "Model ClassName". It saves this value as g:snippet_classname, then
    uses it to populate other parts of the snippet. It uses both camelcase and
    underscored versions of where appropriate.

    For example, if i was to enter FooBarBaz as the value, the resulting code
    would look like this:
>
    def update
      @foo_bar_baz = FooBarBaz.find(params[:id])

      respond_to do |wants|
        if @foo_bar_baz.update_attributes(params[:foo_bar_baz])
          flash[:notice] = 'FooBarBaz was successfully updated.'
          wants.html { redirect_to(@foo_bar_baz) }
          wants.xml  { head :ok }
        else
          wants.html { render :action => "edit" }
          wants.xml  { render :xml => @foo_bar_baz.errors, :status => :unprocessable_entity }
        end
      end
    end
<

==============================================================================
OPTIONS                                                 *nerdsnippets-options*

Variables:
  g:NERDSnippets_key                        default: <tab>
      expands snippets and jumps to markers
  g:NERDSnippets_marker_start               default: <+
      start of marker tags
  g:NERDSnippets_marker_end                 default: +>
      end of marker tags

==============================================================================
ABOUT                                                     *nerdsnippets-about*

The author can be reached at martin_grenfell at msn.com. Feel free to send him
suggestions and/or comments about this plugin. He also hangs in the #vim on
freenode as scrooloose.

The latest dev versions are on github
    http://github.com/scrooloose/nerdsnippets

There is also a repository of snippets on github
    http://github.com/scrooloose/snippets

==============================================================================
LICENSE                                              *nerdsnippets-license*

NERD Snippets is released under the wtfpl.
See http://sam.zoy.org/wtfpl/COPYING.

/* vim: set ft=help:*/
